RAW provider 2021/05/18 16:34:02 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:34:02 Finished
RAW provider 2021/05/18 16:34:03 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:34:03 Finished
RAW provider 2021/05/18 16:34:05 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:34:06 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://58AE7D8133931B46B4954D1176749064.yl4.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4f, 0x44, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4e, 0x6a, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4b, 0x6c, 0x4b, 0xa, 0x72, 0x5a, 0x6d, 0x45, 0x51, 0x39, 0x76, 0x68, 0x66, 0x65, 0x45, 0x75, 0x46, 0x65, 0x30, 0x55, 0x32, 0x55, 0x71, 0x35, 0x52, 0x2b, 0x44, 0x61, 0x4d, 0x62, 0x36, 0x4e, 0x76, 0x31, 0x47, 0x6d, 0x7a, 0x4c, 0x30, 0x52, 0x74, 0x4f, 0x50, 0x47, 0x34, 0x56, 0x42, 0x71, 0x34, 0x43, 0x61, 0x72, 0x31, 0x68, 0x59, 0x38, 0x57, 0x76, 0x31, 0x41, 0x42, 0x34, 0x6d, 0x62, 0x51, 0x6e, 0x32, 0x4e, 0xa, 0x50, 0x76, 0x54, 0x2b, 0x34, 0x38, 0x76, 0x61, 0x2b, 0x69, 0x6f, 0x57, 0x34, 0x50, 0x59, 0x61, 0x4e, 0x71, 0x6a, 0x4c, 0x66, 0x57, 0x65, 0x32, 0x46, 0x48, 0x31, 0x55, 0x6c, 0x76, 0x65, 0x4f, 0x50, 0x41, 0x73, 0x33, 0x6e, 0x68, 0x31, 0x4b, 0x39, 0x45, 0x73, 0x63, 0x39, 0x57, 0x79, 0x46, 0x66, 0x78, 0x43, 0x66, 0x65, 0x73, 0x6b, 0x66, 0x6d, 0x7a, 0x36, 0x7a, 0x71, 0x69, 0x35, 0x77, 0xa, 0x42, 0x6e, 0x6f, 0x39, 0x77, 0x79, 0x2b, 0x33, 0x63, 0x45, 0x37, 0x45, 0x56, 0x45, 0x4d, 0x44, 0x35, 0x65, 0x4f, 0x34, 0x53, 0x34, 0x49, 0x4d, 0x6d, 0x6f, 0x56, 0x6a, 0x55, 0x54, 0x6e, 0x4d, 0x61, 0x6e, 0x74, 0x4f, 0x32, 0x34, 0x52, 0x36, 0x71, 0x4d, 0x6c, 0x74, 0x41, 0x6e, 0x2f, 0x59, 0x6f, 0x31, 0x67, 0x63, 0x6f, 0x38, 0x75, 0x37, 0x6f, 0x48, 0x6f, 0x63, 0x67, 0x4e, 0x46, 0x78, 0xa, 0x46, 0x56, 0x51, 0x6a, 0x79, 0x69, 0x56, 0x48, 0x54, 0x6f, 0x59, 0x5a, 0x70, 0x41, 0x41, 0x4a, 0x61, 0x73, 0x2b, 0x39, 0x61, 0x35, 0x5a, 0x74, 0x53, 0x6e, 0x46, 0x5a, 0x68, 0x7a, 0x44, 0x51, 0x31, 0x41, 0x47, 0x39, 0x6c, 0x58, 0x78, 0x45, 0x43, 0x42, 0x42, 0x51, 0x79, 0x42, 0x59, 0x63, 0x76, 0x74, 0x51, 0x32, 0x2b, 0x73, 0x31, 0x6c, 0x4d, 0x70, 0x62, 0x45, 0x6b, 0x61, 0x6a, 0x4e, 0xa, 0x5a, 0x2b, 0x78, 0x50, 0x73, 0x48, 0x7a, 0x55, 0x7a, 0x62, 0x65, 0x48, 0x4e, 0x36, 0x55, 0x54, 0x76, 0x74, 0x41, 0x59, 0x51, 0x41, 0x35, 0x33, 0x46, 0x70, 0x31, 0x6c, 0x53, 0x34, 0x58, 0x64, 0x66, 0x45, 0x64, 0x38, 0x44, 0x65, 0x79, 0x36, 0x79, 0x72, 0x66, 0x7a, 0x46, 0x6e, 0x2b, 0x31, 0x4f, 0x39, 0x76, 0x30, 0x58, 0x6f, 0x59, 0x34, 0x65, 0x52, 0x58, 0x57, 0x37, 0x62, 0x59, 0x32, 0xa, 0x4d, 0x77, 0x6c, 0x55, 0x77, 0x4e, 0x59, 0x67, 0x4a, 0x35, 0x37, 0x58, 0x54, 0x68, 0x36, 0x59, 0x68, 0x42, 0x4d, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4a, 0x52, 0x54, 0x41, 0x6b, 0x4e, 0x45, 0x4f, 0x48, 0x79, 0x2f, 0x48, 0x37, 0x65, 0x54, 0x44, 0x2b, 0x39, 0x77, 0x47, 0x76, 0x77, 0x36, 0x39, 0x50, 0x6a, 0x46, 0xa, 0x66, 0x74, 0x6d, 0x4b, 0x6c, 0x77, 0x42, 0x30, 0x37, 0x4b, 0x6d, 0x59, 0x45, 0x70, 0x72, 0x47, 0x49, 0x69, 0x38, 0x2f, 0x57, 0x6b, 0x6c, 0x67, 0x58, 0x41, 0x74, 0x47, 0x5a, 0x70, 0x34, 0x42, 0x4e, 0x36, 0x59, 0x4c, 0x5a, 0x51, 0x42, 0x57, 0x42, 0x4d, 0x37, 0x61, 0x78, 0x4a, 0x74, 0x33, 0x64, 0x47, 0x68, 0x76, 0x35, 0x48, 0x51, 0x30, 0x44, 0x59, 0x41, 0x76, 0x51, 0x78, 0x73, 0x57, 0xa, 0x50, 0x4d, 0x43, 0x4d, 0x46, 0x43, 0x45, 0x61, 0x78, 0x63, 0x4a, 0x4e, 0x78, 0x33, 0x32, 0x34, 0x62, 0x54, 0x53, 0x75, 0x35, 0x4b, 0x74, 0x65, 0x2b, 0x38, 0x70, 0x6f, 0x70, 0x77, 0x78, 0x2f, 0x70, 0x2f, 0x35, 0x41, 0x5a, 0x4a, 0x6c, 0x46, 0x6b, 0x6e, 0x39, 0x32, 0x75, 0x32, 0x48, 0x44, 0x5a, 0x35, 0x79, 0x37, 0x30, 0x62, 0x37, 0x57, 0x4c, 0x37, 0x65, 0x72, 0x65, 0x37, 0x2b, 0x65, 0xa, 0x4e, 0x69, 0x34, 0x31, 0x75, 0x4e, 0x61, 0x2b, 0x68, 0x47, 0x79, 0x4e, 0x67, 0x6c, 0x6f, 0x75, 0x55, 0x33, 0x57, 0x5a, 0x34, 0x78, 0x66, 0x70, 0x57, 0x54, 0x4e, 0x33, 0x71, 0x71, 0x78, 0x44, 0x59, 0x73, 0x57, 0x32, 0x74, 0x43, 0x52, 0x46, 0x41, 0x61, 0x4d, 0x79, 0x67, 0x4d, 0x56, 0x62, 0x78, 0x53, 0x75, 0x31, 0x6b, 0x38, 0x59, 0x48, 0x64, 0x47, 0x55, 0x59, 0x58, 0x6e, 0x5a, 0x6e, 0xa, 0x66, 0x64, 0x44, 0x31, 0x52, 0x77, 0x71, 0x6a, 0x62, 0x4f, 0x5a, 0x78, 0x47, 0x73, 0x75, 0x34, 0x4b, 0x50, 0x38, 0x30, 0x6d, 0x59, 0x71, 0x73, 0x63, 0x54, 0x50, 0x45, 0x74, 0x69, 0x51, 0x54, 0x74, 0x78, 0x2f, 0x2f, 0x6b, 0x46, 0x76, 0x6c, 0x4d, 0x41, 0x32, 0x6a, 0x5a, 0x4a, 0x69, 0x43, 0x62, 0x61, 0x65, 0x45, 0x4f, 0x45, 0x56, 0x72, 0x43, 0x2f, 0x51, 0x49, 0x2f, 0x69, 0x57, 0x71, 0xa, 0x6d, 0x48, 0x63, 0x68, 0x4e, 0x55, 0x44, 0x72, 0x4f, 0x75, 0x41, 0x54, 0x68, 0x2f, 0x33, 0x7a, 0x76, 0x68, 0x4c, 0x75, 0x79, 0x61, 0x70, 0x65, 0x36, 0x4b, 0x77, 0x58, 0x6e, 0x4b, 0x73, 0x46, 0x41, 0x48, 0x54, 0x41, 0x68, 0x51, 0x39, 0x2b, 0x52, 0x38, 0x72, 0x4e, 0x55, 0x33, 0x51, 0x6d, 0x64, 0x2f, 0x36, 0x35, 0x63, 0x39, 0x4b, 0x6c, 0x6d, 0x35, 0x55, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/05/18 16:34:07 Finished
RAW provider 2021/05/18 16:35:31 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:35:31 Finished
RAW provider 2021/05/18 16:35:31 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:35:32 Finished
RAW provider 2021/05/18 16:35:34 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:35:34 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://58AE7D8133931B46B4954D1176749064.yl4.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4f, 0x44, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4e, 0x6a, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4b, 0x6c, 0x4b, 0xa, 0x72, 0x5a, 0x6d, 0x45, 0x51, 0x39, 0x76, 0x68, 0x66, 0x65, 0x45, 0x75, 0x46, 0x65, 0x30, 0x55, 0x32, 0x55, 0x71, 0x35, 0x52, 0x2b, 0x44, 0x61, 0x4d, 0x62, 0x36, 0x4e, 0x76, 0x31, 0x47, 0x6d, 0x7a, 0x4c, 0x30, 0x52, 0x74, 0x4f, 0x50, 0x47, 0x34, 0x56, 0x42, 0x71, 0x34, 0x43, 0x61, 0x72, 0x31, 0x68, 0x59, 0x38, 0x57, 0x76, 0x31, 0x41, 0x42, 0x34, 0x6d, 0x62, 0x51, 0x6e, 0x32, 0x4e, 0xa, 0x50, 0x76, 0x54, 0x2b, 0x34, 0x38, 0x76, 0x61, 0x2b, 0x69, 0x6f, 0x57, 0x34, 0x50, 0x59, 0x61, 0x4e, 0x71, 0x6a, 0x4c, 0x66, 0x57, 0x65, 0x32, 0x46, 0x48, 0x31, 0x55, 0x6c, 0x76, 0x65, 0x4f, 0x50, 0x41, 0x73, 0x33, 0x6e, 0x68, 0x31, 0x4b, 0x39, 0x45, 0x73, 0x63, 0x39, 0x57, 0x79, 0x46, 0x66, 0x78, 0x43, 0x66, 0x65, 0x73, 0x6b, 0x66, 0x6d, 0x7a, 0x36, 0x7a, 0x71, 0x69, 0x35, 0x77, 0xa, 0x42, 0x6e, 0x6f, 0x39, 0x77, 0x79, 0x2b, 0x33, 0x63, 0x45, 0x37, 0x45, 0x56, 0x45, 0x4d, 0x44, 0x35, 0x65, 0x4f, 0x34, 0x53, 0x34, 0x49, 0x4d, 0x6d, 0x6f, 0x56, 0x6a, 0x55, 0x54, 0x6e, 0x4d, 0x61, 0x6e, 0x74, 0x4f, 0x32, 0x34, 0x52, 0x36, 0x71, 0x4d, 0x6c, 0x74, 0x41, 0x6e, 0x2f, 0x59, 0x6f, 0x31, 0x67, 0x63, 0x6f, 0x38, 0x75, 0x37, 0x6f, 0x48, 0x6f, 0x63, 0x67, 0x4e, 0x46, 0x78, 0xa, 0x46, 0x56, 0x51, 0x6a, 0x79, 0x69, 0x56, 0x48, 0x54, 0x6f, 0x59, 0x5a, 0x70, 0x41, 0x41, 0x4a, 0x61, 0x73, 0x2b, 0x39, 0x61, 0x35, 0x5a, 0x74, 0x53, 0x6e, 0x46, 0x5a, 0x68, 0x7a, 0x44, 0x51, 0x31, 0x41, 0x47, 0x39, 0x6c, 0x58, 0x78, 0x45, 0x43, 0x42, 0x42, 0x51, 0x79, 0x42, 0x59, 0x63, 0x76, 0x74, 0x51, 0x32, 0x2b, 0x73, 0x31, 0x6c, 0x4d, 0x70, 0x62, 0x45, 0x6b, 0x61, 0x6a, 0x4e, 0xa, 0x5a, 0x2b, 0x78, 0x50, 0x73, 0x48, 0x7a, 0x55, 0x7a, 0x62, 0x65, 0x48, 0x4e, 0x36, 0x55, 0x54, 0x76, 0x74, 0x41, 0x59, 0x51, 0x41, 0x35, 0x33, 0x46, 0x70, 0x31, 0x6c, 0x53, 0x34, 0x58, 0x64, 0x66, 0x45, 0x64, 0x38, 0x44, 0x65, 0x79, 0x36, 0x79, 0x72, 0x66, 0x7a, 0x46, 0x6e, 0x2b, 0x31, 0x4f, 0x39, 0x76, 0x30, 0x58, 0x6f, 0x59, 0x34, 0x65, 0x52, 0x58, 0x57, 0x37, 0x62, 0x59, 0x32, 0xa, 0x4d, 0x77, 0x6c, 0x55, 0x77, 0x4e, 0x59, 0x67, 0x4a, 0x35, 0x37, 0x58, 0x54, 0x68, 0x36, 0x59, 0x68, 0x42, 0x4d, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4a, 0x52, 0x54, 0x41, 0x6b, 0x4e, 0x45, 0x4f, 0x48, 0x79, 0x2f, 0x48, 0x37, 0x65, 0x54, 0x44, 0x2b, 0x39, 0x77, 0x47, 0x76, 0x77, 0x36, 0x39, 0x50, 0x6a, 0x46, 0xa, 0x66, 0x74, 0x6d, 0x4b, 0x6c, 0x77, 0x42, 0x30, 0x37, 0x4b, 0x6d, 0x59, 0x45, 0x70, 0x72, 0x47, 0x49, 0x69, 0x38, 0x2f, 0x57, 0x6b, 0x6c, 0x67, 0x58, 0x41, 0x74, 0x47, 0x5a, 0x70, 0x34, 0x42, 0x4e, 0x36, 0x59, 0x4c, 0x5a, 0x51, 0x42, 0x57, 0x42, 0x4d, 0x37, 0x61, 0x78, 0x4a, 0x74, 0x33, 0x64, 0x47, 0x68, 0x76, 0x35, 0x48, 0x51, 0x30, 0x44, 0x59, 0x41, 0x76, 0x51, 0x78, 0x73, 0x57, 0xa, 0x50, 0x4d, 0x43, 0x4d, 0x46, 0x43, 0x45, 0x61, 0x78, 0x63, 0x4a, 0x4e, 0x78, 0x33, 0x32, 0x34, 0x62, 0x54, 0x53, 0x75, 0x35, 0x4b, 0x74, 0x65, 0x2b, 0x38, 0x70, 0x6f, 0x70, 0x77, 0x78, 0x2f, 0x70, 0x2f, 0x35, 0x41, 0x5a, 0x4a, 0x6c, 0x46, 0x6b, 0x6e, 0x39, 0x32, 0x75, 0x32, 0x48, 0x44, 0x5a, 0x35, 0x79, 0x37, 0x30, 0x62, 0x37, 0x57, 0x4c, 0x37, 0x65, 0x72, 0x65, 0x37, 0x2b, 0x65, 0xa, 0x4e, 0x69, 0x34, 0x31, 0x75, 0x4e, 0x61, 0x2b, 0x68, 0x47, 0x79, 0x4e, 0x67, 0x6c, 0x6f, 0x75, 0x55, 0x33, 0x57, 0x5a, 0x34, 0x78, 0x66, 0x70, 0x57, 0x54, 0x4e, 0x33, 0x71, 0x71, 0x78, 0x44, 0x59, 0x73, 0x57, 0x32, 0x74, 0x43, 0x52, 0x46, 0x41, 0x61, 0x4d, 0x79, 0x67, 0x4d, 0x56, 0x62, 0x78, 0x53, 0x75, 0x31, 0x6b, 0x38, 0x59, 0x48, 0x64, 0x47, 0x55, 0x59, 0x58, 0x6e, 0x5a, 0x6e, 0xa, 0x66, 0x64, 0x44, 0x31, 0x52, 0x77, 0x71, 0x6a, 0x62, 0x4f, 0x5a, 0x78, 0x47, 0x73, 0x75, 0x34, 0x4b, 0x50, 0x38, 0x30, 0x6d, 0x59, 0x71, 0x73, 0x63, 0x54, 0x50, 0x45, 0x74, 0x69, 0x51, 0x54, 0x74, 0x78, 0x2f, 0x2f, 0x6b, 0x46, 0x76, 0x6c, 0x4d, 0x41, 0x32, 0x6a, 0x5a, 0x4a, 0x69, 0x43, 0x62, 0x61, 0x65, 0x45, 0x4f, 0x45, 0x56, 0x72, 0x43, 0x2f, 0x51, 0x49, 0x2f, 0x69, 0x57, 0x71, 0xa, 0x6d, 0x48, 0x63, 0x68, 0x4e, 0x55, 0x44, 0x72, 0x4f, 0x75, 0x41, 0x54, 0x68, 0x2f, 0x33, 0x7a, 0x76, 0x68, 0x4c, 0x75, 0x79, 0x61, 0x70, 0x65, 0x36, 0x4b, 0x77, 0x58, 0x6e, 0x4b, 0x73, 0x46, 0x41, 0x48, 0x54, 0x41, 0x68, 0x51, 0x39, 0x2b, 0x52, 0x38, 0x72, 0x4e, 0x55, 0x33, 0x51, 0x6d, 0x64, 0x2f, 0x36, 0x35, 0x63, 0x39, 0x4b, 0x6c, 0x6d, 0x35, 0x55, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/05/18 16:35:35 Finished
RAW provider 2021/05/18 16:35:40 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:35:40 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://58AE7D8133931B46B4954D1176749064.yl4.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4f, 0x44, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4e, 0x6a, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4b, 0x6c, 0x4b, 0xa, 0x72, 0x5a, 0x6d, 0x45, 0x51, 0x39, 0x76, 0x68, 0x66, 0x65, 0x45, 0x75, 0x46, 0x65, 0x30, 0x55, 0x32, 0x55, 0x71, 0x35, 0x52, 0x2b, 0x44, 0x61, 0x4d, 0x62, 0x36, 0x4e, 0x76, 0x31, 0x47, 0x6d, 0x7a, 0x4c, 0x30, 0x52, 0x74, 0x4f, 0x50, 0x47, 0x34, 0x56, 0x42, 0x71, 0x34, 0x43, 0x61, 0x72, 0x31, 0x68, 0x59, 0x38, 0x57, 0x76, 0x31, 0x41, 0x42, 0x34, 0x6d, 0x62, 0x51, 0x6e, 0x32, 0x4e, 0xa, 0x50, 0x76, 0x54, 0x2b, 0x34, 0x38, 0x76, 0x61, 0x2b, 0x69, 0x6f, 0x57, 0x34, 0x50, 0x59, 0x61, 0x4e, 0x71, 0x6a, 0x4c, 0x66, 0x57, 0x65, 0x32, 0x46, 0x48, 0x31, 0x55, 0x6c, 0x76, 0x65, 0x4f, 0x50, 0x41, 0x73, 0x33, 0x6e, 0x68, 0x31, 0x4b, 0x39, 0x45, 0x73, 0x63, 0x39, 0x57, 0x79, 0x46, 0x66, 0x78, 0x43, 0x66, 0x65, 0x73, 0x6b, 0x66, 0x6d, 0x7a, 0x36, 0x7a, 0x71, 0x69, 0x35, 0x77, 0xa, 0x42, 0x6e, 0x6f, 0x39, 0x77, 0x79, 0x2b, 0x33, 0x63, 0x45, 0x37, 0x45, 0x56, 0x45, 0x4d, 0x44, 0x35, 0x65, 0x4f, 0x34, 0x53, 0x34, 0x49, 0x4d, 0x6d, 0x6f, 0x56, 0x6a, 0x55, 0x54, 0x6e, 0x4d, 0x61, 0x6e, 0x74, 0x4f, 0x32, 0x34, 0x52, 0x36, 0x71, 0x4d, 0x6c, 0x74, 0x41, 0x6e, 0x2f, 0x59, 0x6f, 0x31, 0x67, 0x63, 0x6f, 0x38, 0x75, 0x37, 0x6f, 0x48, 0x6f, 0x63, 0x67, 0x4e, 0x46, 0x78, 0xa, 0x46, 0x56, 0x51, 0x6a, 0x79, 0x69, 0x56, 0x48, 0x54, 0x6f, 0x59, 0x5a, 0x70, 0x41, 0x41, 0x4a, 0x61, 0x73, 0x2b, 0x39, 0x61, 0x35, 0x5a, 0x74, 0x53, 0x6e, 0x46, 0x5a, 0x68, 0x7a, 0x44, 0x51, 0x31, 0x41, 0x47, 0x39, 0x6c, 0x58, 0x78, 0x45, 0x43, 0x42, 0x42, 0x51, 0x79, 0x42, 0x59, 0x63, 0x76, 0x74, 0x51, 0x32, 0x2b, 0x73, 0x31, 0x6c, 0x4d, 0x70, 0x62, 0x45, 0x6b, 0x61, 0x6a, 0x4e, 0xa, 0x5a, 0x2b, 0x78, 0x50, 0x73, 0x48, 0x7a, 0x55, 0x7a, 0x62, 0x65, 0x48, 0x4e, 0x36, 0x55, 0x54, 0x76, 0x74, 0x41, 0x59, 0x51, 0x41, 0x35, 0x33, 0x46, 0x70, 0x31, 0x6c, 0x53, 0x34, 0x58, 0x64, 0x66, 0x45, 0x64, 0x38, 0x44, 0x65, 0x79, 0x36, 0x79, 0x72, 0x66, 0x7a, 0x46, 0x6e, 0x2b, 0x31, 0x4f, 0x39, 0x76, 0x30, 0x58, 0x6f, 0x59, 0x34, 0x65, 0x52, 0x58, 0x57, 0x37, 0x62, 0x59, 0x32, 0xa, 0x4d, 0x77, 0x6c, 0x55, 0x77, 0x4e, 0x59, 0x67, 0x4a, 0x35, 0x37, 0x58, 0x54, 0x68, 0x36, 0x59, 0x68, 0x42, 0x4d, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4a, 0x52, 0x54, 0x41, 0x6b, 0x4e, 0x45, 0x4f, 0x48, 0x79, 0x2f, 0x48, 0x37, 0x65, 0x54, 0x44, 0x2b, 0x39, 0x77, 0x47, 0x76, 0x77, 0x36, 0x39, 0x50, 0x6a, 0x46, 0xa, 0x66, 0x74, 0x6d, 0x4b, 0x6c, 0x77, 0x42, 0x30, 0x37, 0x4b, 0x6d, 0x59, 0x45, 0x70, 0x72, 0x47, 0x49, 0x69, 0x38, 0x2f, 0x57, 0x6b, 0x6c, 0x67, 0x58, 0x41, 0x74, 0x47, 0x5a, 0x70, 0x34, 0x42, 0x4e, 0x36, 0x59, 0x4c, 0x5a, 0x51, 0x42, 0x57, 0x42, 0x4d, 0x37, 0x61, 0x78, 0x4a, 0x74, 0x33, 0x64, 0x47, 0x68, 0x76, 0x35, 0x48, 0x51, 0x30, 0x44, 0x59, 0x41, 0x76, 0x51, 0x78, 0x73, 0x57, 0xa, 0x50, 0x4d, 0x43, 0x4d, 0x46, 0x43, 0x45, 0x61, 0x78, 0x63, 0x4a, 0x4e, 0x78, 0x33, 0x32, 0x34, 0x62, 0x54, 0x53, 0x75, 0x35, 0x4b, 0x74, 0x65, 0x2b, 0x38, 0x70, 0x6f, 0x70, 0x77, 0x78, 0x2f, 0x70, 0x2f, 0x35, 0x41, 0x5a, 0x4a, 0x6c, 0x46, 0x6b, 0x6e, 0x39, 0x32, 0x75, 0x32, 0x48, 0x44, 0x5a, 0x35, 0x79, 0x37, 0x30, 0x62, 0x37, 0x57, 0x4c, 0x37, 0x65, 0x72, 0x65, 0x37, 0x2b, 0x65, 0xa, 0x4e, 0x69, 0x34, 0x31, 0x75, 0x4e, 0x61, 0x2b, 0x68, 0x47, 0x79, 0x4e, 0x67, 0x6c, 0x6f, 0x75, 0x55, 0x33, 0x57, 0x5a, 0x34, 0x78, 0x66, 0x70, 0x57, 0x54, 0x4e, 0x33, 0x71, 0x71, 0x78, 0x44, 0x59, 0x73, 0x57, 0x32, 0x74, 0x43, 0x52, 0x46, 0x41, 0x61, 0x4d, 0x79, 0x67, 0x4d, 0x56, 0x62, 0x78, 0x53, 0x75, 0x31, 0x6b, 0x38, 0x59, 0x48, 0x64, 0x47, 0x55, 0x59, 0x58, 0x6e, 0x5a, 0x6e, 0xa, 0x66, 0x64, 0x44, 0x31, 0x52, 0x77, 0x71, 0x6a, 0x62, 0x4f, 0x5a, 0x78, 0x47, 0x73, 0x75, 0x34, 0x4b, 0x50, 0x38, 0x30, 0x6d, 0x59, 0x71, 0x73, 0x63, 0x54, 0x50, 0x45, 0x74, 0x69, 0x51, 0x54, 0x74, 0x78, 0x2f, 0x2f, 0x6b, 0x46, 0x76, 0x6c, 0x4d, 0x41, 0x32, 0x6a, 0x5a, 0x4a, 0x69, 0x43, 0x62, 0x61, 0x65, 0x45, 0x4f, 0x45, 0x56, 0x72, 0x43, 0x2f, 0x51, 0x49, 0x2f, 0x69, 0x57, 0x71, 0xa, 0x6d, 0x48, 0x63, 0x68, 0x4e, 0x55, 0x44, 0x72, 0x4f, 0x75, 0x41, 0x54, 0x68, 0x2f, 0x33, 0x7a, 0x76, 0x68, 0x4c, 0x75, 0x79, 0x61, 0x70, 0x65, 0x36, 0x4b, 0x77, 0x58, 0x6e, 0x4b, 0x73, 0x46, 0x41, 0x48, 0x54, 0x41, 0x68, 0x51, 0x39, 0x2b, 0x52, 0x38, 0x72, 0x4e, 0x55, 0x33, 0x51, 0x6d, 0x64, 0x2f, 0x36, 0x35, 0x63, 0x39, 0x4b, 0x6c, 0x6d, 0x35, 0x55, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/05/18 16:35:42 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
     }
    }
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https",
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443"
     }
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/05/18 16:35:42 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/05/18 16:35:42 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/05/18 16:35:42 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc00038e038)({
 Object: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
  (string) (len=4) "kind": (string) (len=10) "Middleware",
  (string) (len=8) "metadata": (map[string]interface {}) (len=8) {
   (string) (len=15) "resourceVersion": (string) (len=4) "9413",
   (string) (len=8) "selfLink": (string) (len=86) "/apis/traefik.containo.us/v1alpha1/namespaces/default/middlewares/requestheaders-https",
   (string) (len=3) "uid": (string) (len=36) "e547fa7d-c9ee-4b1f-a02a-285a61867116",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-05-18T13:35:42Z",
   (string) (len=10) "generation": (int64) 1,
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=1) {
      (string) (len=6) "f:spec": (map[string]interface {}) (len=2) {
       (string) (len=9) "f:headers": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=22) "f:customRequestHeaders": (map[string]interface {}) (len=3) {
         (string) (len=1) ".": (map[string]interface {}) {
         },
         (string) (len=18) "f:X-Forwarded-Port": (map[string]interface {}) {
         },
         (string) (len=19) "f:X-Forwarded-Proto": (map[string]interface {}) {
         }
        }
       },
       (string) (len=1) ".": (map[string]interface {}) {
       }
      }
     },
     (string) (len=7) "manager": (string) (len=9) "Terraform",
     (string) (len=9) "operation": (string) (len=5) "Apply",
     (string) (len=4) "time": (string) (len=20) "2021-05-18T13:35:42Z"
    }
   },
   (string) (len=4) "name": (string) (len=20) "requestheaders-https",
   (string) (len=9) "namespace": (string) (len=7) "default"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=7) "headers": (map[string]interface {}) (len=1) {
    (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
     (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
     (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
    }
   }
  }
 }
})

RAW provider 2021/05/18 16:35:42 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=7) "headers": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=20) "customRequestHeaders": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=16) "X-Forwarded-Port": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=9) "namespace": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=4) "kind": (string) (len=10) "Middleware",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=4) "name": (string) (len=20) "requestheaders-https",
   (string) (len=9) "namespace": (string) (len=7) "default"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=7) "headers": (map[string]interface {}) (len=1) {
    (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
     (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
     (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
    }
   }
  },
  (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1"
 }
}

RAW provider 2021/05/18 16:35:42 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https",
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https",
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=9) "namespace": (string) (len=7) "default",
    (string) (len=4) "name": (string) (len=20) "requestheaders-https"
   }
  }
 }
}
RAW provider 2021/05/18 16:35:42 Finished
RAW provider 2021/05/18 16:41:57 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:41:57 Finished
RAW provider 2021/05/18 16:41:58 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:41:58 Finished
RAW provider 2021/05/18 16:41:59 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:41:59 Finished
RAW provider 2021/05/18 16:42:02 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:42:02 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://58AE7D8133931B46B4954D1176749064.yl4.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4f, 0x44, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4e, 0x6a, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4b, 0x6c, 0x4b, 0xa, 0x72, 0x5a, 0x6d, 0x45, 0x51, 0x39, 0x76, 0x68, 0x66, 0x65, 0x45, 0x75, 0x46, 0x65, 0x30, 0x55, 0x32, 0x55, 0x71, 0x35, 0x52, 0x2b, 0x44, 0x61, 0x4d, 0x62, 0x36, 0x4e, 0x76, 0x31, 0x47, 0x6d, 0x7a, 0x4c, 0x30, 0x52, 0x74, 0x4f, 0x50, 0x47, 0x34, 0x56, 0x42, 0x71, 0x34, 0x43, 0x61, 0x72, 0x31, 0x68, 0x59, 0x38, 0x57, 0x76, 0x31, 0x41, 0x42, 0x34, 0x6d, 0x62, 0x51, 0x6e, 0x32, 0x4e, 0xa, 0x50, 0x76, 0x54, 0x2b, 0x34, 0x38, 0x76, 0x61, 0x2b, 0x69, 0x6f, 0x57, 0x34, 0x50, 0x59, 0x61, 0x4e, 0x71, 0x6a, 0x4c, 0x66, 0x57, 0x65, 0x32, 0x46, 0x48, 0x31, 0x55, 0x6c, 0x76, 0x65, 0x4f, 0x50, 0x41, 0x73, 0x33, 0x6e, 0x68, 0x31, 0x4b, 0x39, 0x45, 0x73, 0x63, 0x39, 0x57, 0x79, 0x46, 0x66, 0x78, 0x43, 0x66, 0x65, 0x73, 0x6b, 0x66, 0x6d, 0x7a, 0x36, 0x7a, 0x71, 0x69, 0x35, 0x77, 0xa, 0x42, 0x6e, 0x6f, 0x39, 0x77, 0x79, 0x2b, 0x33, 0x63, 0x45, 0x37, 0x45, 0x56, 0x45, 0x4d, 0x44, 0x35, 0x65, 0x4f, 0x34, 0x53, 0x34, 0x49, 0x4d, 0x6d, 0x6f, 0x56, 0x6a, 0x55, 0x54, 0x6e, 0x4d, 0x61, 0x6e, 0x74, 0x4f, 0x32, 0x34, 0x52, 0x36, 0x71, 0x4d, 0x6c, 0x74, 0x41, 0x6e, 0x2f, 0x59, 0x6f, 0x31, 0x67, 0x63, 0x6f, 0x38, 0x75, 0x37, 0x6f, 0x48, 0x6f, 0x63, 0x67, 0x4e, 0x46, 0x78, 0xa, 0x46, 0x56, 0x51, 0x6a, 0x79, 0x69, 0x56, 0x48, 0x54, 0x6f, 0x59, 0x5a, 0x70, 0x41, 0x41, 0x4a, 0x61, 0x73, 0x2b, 0x39, 0x61, 0x35, 0x5a, 0x74, 0x53, 0x6e, 0x46, 0x5a, 0x68, 0x7a, 0x44, 0x51, 0x31, 0x41, 0x47, 0x39, 0x6c, 0x58, 0x78, 0x45, 0x43, 0x42, 0x42, 0x51, 0x79, 0x42, 0x59, 0x63, 0x76, 0x74, 0x51, 0x32, 0x2b, 0x73, 0x31, 0x6c, 0x4d, 0x70, 0x62, 0x45, 0x6b, 0x61, 0x6a, 0x4e, 0xa, 0x5a, 0x2b, 0x78, 0x50, 0x73, 0x48, 0x7a, 0x55, 0x7a, 0x62, 0x65, 0x48, 0x4e, 0x36, 0x55, 0x54, 0x76, 0x74, 0x41, 0x59, 0x51, 0x41, 0x35, 0x33, 0x46, 0x70, 0x31, 0x6c, 0x53, 0x34, 0x58, 0x64, 0x66, 0x45, 0x64, 0x38, 0x44, 0x65, 0x79, 0x36, 0x79, 0x72, 0x66, 0x7a, 0x46, 0x6e, 0x2b, 0x31, 0x4f, 0x39, 0x76, 0x30, 0x58, 0x6f, 0x59, 0x34, 0x65, 0x52, 0x58, 0x57, 0x37, 0x62, 0x59, 0x32, 0xa, 0x4d, 0x77, 0x6c, 0x55, 0x77, 0x4e, 0x59, 0x67, 0x4a, 0x35, 0x37, 0x58, 0x54, 0x68, 0x36, 0x59, 0x68, 0x42, 0x4d, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4a, 0x52, 0x54, 0x41, 0x6b, 0x4e, 0x45, 0x4f, 0x48, 0x79, 0x2f, 0x48, 0x37, 0x65, 0x54, 0x44, 0x2b, 0x39, 0x77, 0x47, 0x76, 0x77, 0x36, 0x39, 0x50, 0x6a, 0x46, 0xa, 0x66, 0x74, 0x6d, 0x4b, 0x6c, 0x77, 0x42, 0x30, 0x37, 0x4b, 0x6d, 0x59, 0x45, 0x70, 0x72, 0x47, 0x49, 0x69, 0x38, 0x2f, 0x57, 0x6b, 0x6c, 0x67, 0x58, 0x41, 0x74, 0x47, 0x5a, 0x70, 0x34, 0x42, 0x4e, 0x36, 0x59, 0x4c, 0x5a, 0x51, 0x42, 0x57, 0x42, 0x4d, 0x37, 0x61, 0x78, 0x4a, 0x74, 0x33, 0x64, 0x47, 0x68, 0x76, 0x35, 0x48, 0x51, 0x30, 0x44, 0x59, 0x41, 0x76, 0x51, 0x78, 0x73, 0x57, 0xa, 0x50, 0x4d, 0x43, 0x4d, 0x46, 0x43, 0x45, 0x61, 0x78, 0x63, 0x4a, 0x4e, 0x78, 0x33, 0x32, 0x34, 0x62, 0x54, 0x53, 0x75, 0x35, 0x4b, 0x74, 0x65, 0x2b, 0x38, 0x70, 0x6f, 0x70, 0x77, 0x78, 0x2f, 0x70, 0x2f, 0x35, 0x41, 0x5a, 0x4a, 0x6c, 0x46, 0x6b, 0x6e, 0x39, 0x32, 0x75, 0x32, 0x48, 0x44, 0x5a, 0x35, 0x79, 0x37, 0x30, 0x62, 0x37, 0x57, 0x4c, 0x37, 0x65, 0x72, 0x65, 0x37, 0x2b, 0x65, 0xa, 0x4e, 0x69, 0x34, 0x31, 0x75, 0x4e, 0x61, 0x2b, 0x68, 0x47, 0x79, 0x4e, 0x67, 0x6c, 0x6f, 0x75, 0x55, 0x33, 0x57, 0x5a, 0x34, 0x78, 0x66, 0x70, 0x57, 0x54, 0x4e, 0x33, 0x71, 0x71, 0x78, 0x44, 0x59, 0x73, 0x57, 0x32, 0x74, 0x43, 0x52, 0x46, 0x41, 0x61, 0x4d, 0x79, 0x67, 0x4d, 0x56, 0x62, 0x78, 0x53, 0x75, 0x31, 0x6b, 0x38, 0x59, 0x48, 0x64, 0x47, 0x55, 0x59, 0x58, 0x6e, 0x5a, 0x6e, 0xa, 0x66, 0x64, 0x44, 0x31, 0x52, 0x77, 0x71, 0x6a, 0x62, 0x4f, 0x5a, 0x78, 0x47, 0x73, 0x75, 0x34, 0x4b, 0x50, 0x38, 0x30, 0x6d, 0x59, 0x71, 0x73, 0x63, 0x54, 0x50, 0x45, 0x74, 0x69, 0x51, 0x54, 0x74, 0x78, 0x2f, 0x2f, 0x6b, 0x46, 0x76, 0x6c, 0x4d, 0x41, 0x32, 0x6a, 0x5a, 0x4a, 0x69, 0x43, 0x62, 0x61, 0x65, 0x45, 0x4f, 0x45, 0x56, 0x72, 0x43, 0x2f, 0x51, 0x49, 0x2f, 0x69, 0x57, 0x71, 0xa, 0x6d, 0x48, 0x63, 0x68, 0x4e, 0x55, 0x44, 0x72, 0x4f, 0x75, 0x41, 0x54, 0x68, 0x2f, 0x33, 0x7a, 0x76, 0x68, 0x4c, 0x75, 0x79, 0x61, 0x70, 0x65, 0x36, 0x4b, 0x77, 0x58, 0x6e, 0x4b, 0x73, 0x46, 0x41, 0x48, 0x54, 0x41, 0x68, 0x51, 0x39, 0x2b, 0x52, 0x38, 0x72, 0x4e, 0x55, 0x33, 0x51, 0x6d, 0x64, 0x2f, 0x36, 0x35, 0x63, 0x39, 0x4b, 0x6c, 0x6d, 0x35, 0x55, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/05/18 16:42:02 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/05/18 16:42:02 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https",
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443"
     }
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/05/18 16:42:02 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/05/18 16:42:03 Finished
RAW provider 2021/05/18 16:42:31 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:42:31 Finished
RAW provider 2021/05/18 16:42:32 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:42:32 Finished
RAW provider 2021/05/18 16:42:35 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:42:35 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://58AE7D8133931B46B4954D1176749064.yl4.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4f, 0x44, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4e, 0x6a, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4b, 0x6c, 0x4b, 0xa, 0x72, 0x5a, 0x6d, 0x45, 0x51, 0x39, 0x76, 0x68, 0x66, 0x65, 0x45, 0x75, 0x46, 0x65, 0x30, 0x55, 0x32, 0x55, 0x71, 0x35, 0x52, 0x2b, 0x44, 0x61, 0x4d, 0x62, 0x36, 0x4e, 0x76, 0x31, 0x47, 0x6d, 0x7a, 0x4c, 0x30, 0x52, 0x74, 0x4f, 0x50, 0x47, 0x34, 0x56, 0x42, 0x71, 0x34, 0x43, 0x61, 0x72, 0x31, 0x68, 0x59, 0x38, 0x57, 0x76, 0x31, 0x41, 0x42, 0x34, 0x6d, 0x62, 0x51, 0x6e, 0x32, 0x4e, 0xa, 0x50, 0x76, 0x54, 0x2b, 0x34, 0x38, 0x76, 0x61, 0x2b, 0x69, 0x6f, 0x57, 0x34, 0x50, 0x59, 0x61, 0x4e, 0x71, 0x6a, 0x4c, 0x66, 0x57, 0x65, 0x32, 0x46, 0x48, 0x31, 0x55, 0x6c, 0x76, 0x65, 0x4f, 0x50, 0x41, 0x73, 0x33, 0x6e, 0x68, 0x31, 0x4b, 0x39, 0x45, 0x73, 0x63, 0x39, 0x57, 0x79, 0x46, 0x66, 0x78, 0x43, 0x66, 0x65, 0x73, 0x6b, 0x66, 0x6d, 0x7a, 0x36, 0x7a, 0x71, 0x69, 0x35, 0x77, 0xa, 0x42, 0x6e, 0x6f, 0x39, 0x77, 0x79, 0x2b, 0x33, 0x63, 0x45, 0x37, 0x45, 0x56, 0x45, 0x4d, 0x44, 0x35, 0x65, 0x4f, 0x34, 0x53, 0x34, 0x49, 0x4d, 0x6d, 0x6f, 0x56, 0x6a, 0x55, 0x54, 0x6e, 0x4d, 0x61, 0x6e, 0x74, 0x4f, 0x32, 0x34, 0x52, 0x36, 0x71, 0x4d, 0x6c, 0x74, 0x41, 0x6e, 0x2f, 0x59, 0x6f, 0x31, 0x67, 0x63, 0x6f, 0x38, 0x75, 0x37, 0x6f, 0x48, 0x6f, 0x63, 0x67, 0x4e, 0x46, 0x78, 0xa, 0x46, 0x56, 0x51, 0x6a, 0x79, 0x69, 0x56, 0x48, 0x54, 0x6f, 0x59, 0x5a, 0x70, 0x41, 0x41, 0x4a, 0x61, 0x73, 0x2b, 0x39, 0x61, 0x35, 0x5a, 0x74, 0x53, 0x6e, 0x46, 0x5a, 0x68, 0x7a, 0x44, 0x51, 0x31, 0x41, 0x47, 0x39, 0x6c, 0x58, 0x78, 0x45, 0x43, 0x42, 0x42, 0x51, 0x79, 0x42, 0x59, 0x63, 0x76, 0x74, 0x51, 0x32, 0x2b, 0x73, 0x31, 0x6c, 0x4d, 0x70, 0x62, 0x45, 0x6b, 0x61, 0x6a, 0x4e, 0xa, 0x5a, 0x2b, 0x78, 0x50, 0x73, 0x48, 0x7a, 0x55, 0x7a, 0x62, 0x65, 0x48, 0x4e, 0x36, 0x55, 0x54, 0x76, 0x74, 0x41, 0x59, 0x51, 0x41, 0x35, 0x33, 0x46, 0x70, 0x31, 0x6c, 0x53, 0x34, 0x58, 0x64, 0x66, 0x45, 0x64, 0x38, 0x44, 0x65, 0x79, 0x36, 0x79, 0x72, 0x66, 0x7a, 0x46, 0x6e, 0x2b, 0x31, 0x4f, 0x39, 0x76, 0x30, 0x58, 0x6f, 0x59, 0x34, 0x65, 0x52, 0x58, 0x57, 0x37, 0x62, 0x59, 0x32, 0xa, 0x4d, 0x77, 0x6c, 0x55, 0x77, 0x4e, 0x59, 0x67, 0x4a, 0x35, 0x37, 0x58, 0x54, 0x68, 0x36, 0x59, 0x68, 0x42, 0x4d, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4a, 0x52, 0x54, 0x41, 0x6b, 0x4e, 0x45, 0x4f, 0x48, 0x79, 0x2f, 0x48, 0x37, 0x65, 0x54, 0x44, 0x2b, 0x39, 0x77, 0x47, 0x76, 0x77, 0x36, 0x39, 0x50, 0x6a, 0x46, 0xa, 0x66, 0x74, 0x6d, 0x4b, 0x6c, 0x77, 0x42, 0x30, 0x37, 0x4b, 0x6d, 0x59, 0x45, 0x70, 0x72, 0x47, 0x49, 0x69, 0x38, 0x2f, 0x57, 0x6b, 0x6c, 0x67, 0x58, 0x41, 0x74, 0x47, 0x5a, 0x70, 0x34, 0x42, 0x4e, 0x36, 0x59, 0x4c, 0x5a, 0x51, 0x42, 0x57, 0x42, 0x4d, 0x37, 0x61, 0x78, 0x4a, 0x74, 0x33, 0x64, 0x47, 0x68, 0x76, 0x35, 0x48, 0x51, 0x30, 0x44, 0x59, 0x41, 0x76, 0x51, 0x78, 0x73, 0x57, 0xa, 0x50, 0x4d, 0x43, 0x4d, 0x46, 0x43, 0x45, 0x61, 0x78, 0x63, 0x4a, 0x4e, 0x78, 0x33, 0x32, 0x34, 0x62, 0x54, 0x53, 0x75, 0x35, 0x4b, 0x74, 0x65, 0x2b, 0x38, 0x70, 0x6f, 0x70, 0x77, 0x78, 0x2f, 0x70, 0x2f, 0x35, 0x41, 0x5a, 0x4a, 0x6c, 0x46, 0x6b, 0x6e, 0x39, 0x32, 0x75, 0x32, 0x48, 0x44, 0x5a, 0x35, 0x79, 0x37, 0x30, 0x62, 0x37, 0x57, 0x4c, 0x37, 0x65, 0x72, 0x65, 0x37, 0x2b, 0x65, 0xa, 0x4e, 0x69, 0x34, 0x31, 0x75, 0x4e, 0x61, 0x2b, 0x68, 0x47, 0x79, 0x4e, 0x67, 0x6c, 0x6f, 0x75, 0x55, 0x33, 0x57, 0x5a, 0x34, 0x78, 0x66, 0x70, 0x57, 0x54, 0x4e, 0x33, 0x71, 0x71, 0x78, 0x44, 0x59, 0x73, 0x57, 0x32, 0x74, 0x43, 0x52, 0x46, 0x41, 0x61, 0x4d, 0x79, 0x67, 0x4d, 0x56, 0x62, 0x78, 0x53, 0x75, 0x31, 0x6b, 0x38, 0x59, 0x48, 0x64, 0x47, 0x55, 0x59, 0x58, 0x6e, 0x5a, 0x6e, 0xa, 0x66, 0x64, 0x44, 0x31, 0x52, 0x77, 0x71, 0x6a, 0x62, 0x4f, 0x5a, 0x78, 0x47, 0x73, 0x75, 0x34, 0x4b, 0x50, 0x38, 0x30, 0x6d, 0x59, 0x71, 0x73, 0x63, 0x54, 0x50, 0x45, 0x74, 0x69, 0x51, 0x54, 0x74, 0x78, 0x2f, 0x2f, 0x6b, 0x46, 0x76, 0x6c, 0x4d, 0x41, 0x32, 0x6a, 0x5a, 0x4a, 0x69, 0x43, 0x62, 0x61, 0x65, 0x45, 0x4f, 0x45, 0x56, 0x72, 0x43, 0x2f, 0x51, 0x49, 0x2f, 0x69, 0x57, 0x71, 0xa, 0x6d, 0x48, 0x63, 0x68, 0x4e, 0x55, 0x44, 0x72, 0x4f, 0x75, 0x41, 0x54, 0x68, 0x2f, 0x33, 0x7a, 0x76, 0x68, 0x4c, 0x75, 0x79, 0x61, 0x70, 0x65, 0x36, 0x4b, 0x77, 0x58, 0x6e, 0x4b, 0x73, 0x46, 0x41, 0x48, 0x54, 0x41, 0x68, 0x51, 0x39, 0x2b, 0x52, 0x38, 0x72, 0x4e, 0x55, 0x33, 0x51, 0x6d, 0x64, 0x2f, 0x36, 0x35, 0x63, 0x39, 0x4b, 0x6c, 0x6d, 0x35, 0x55, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/05/18 16:42:35 Finished
RAW provider 2021/05/18 16:42:39 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:42:40 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://58AE7D8133931B46B4954D1176749064.yl4.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4f, 0x44, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4e, 0x6a, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4b, 0x6c, 0x4b, 0xa, 0x72, 0x5a, 0x6d, 0x45, 0x51, 0x39, 0x76, 0x68, 0x66, 0x65, 0x45, 0x75, 0x46, 0x65, 0x30, 0x55, 0x32, 0x55, 0x71, 0x35, 0x52, 0x2b, 0x44, 0x61, 0x4d, 0x62, 0x36, 0x4e, 0x76, 0x31, 0x47, 0x6d, 0x7a, 0x4c, 0x30, 0x52, 0x74, 0x4f, 0x50, 0x47, 0x34, 0x56, 0x42, 0x71, 0x34, 0x43, 0x61, 0x72, 0x31, 0x68, 0x59, 0x38, 0x57, 0x76, 0x31, 0x41, 0x42, 0x34, 0x6d, 0x62, 0x51, 0x6e, 0x32, 0x4e, 0xa, 0x50, 0x76, 0x54, 0x2b, 0x34, 0x38, 0x76, 0x61, 0x2b, 0x69, 0x6f, 0x57, 0x34, 0x50, 0x59, 0x61, 0x4e, 0x71, 0x6a, 0x4c, 0x66, 0x57, 0x65, 0x32, 0x46, 0x48, 0x31, 0x55, 0x6c, 0x76, 0x65, 0x4f, 0x50, 0x41, 0x73, 0x33, 0x6e, 0x68, 0x31, 0x4b, 0x39, 0x45, 0x73, 0x63, 0x39, 0x57, 0x79, 0x46, 0x66, 0x78, 0x43, 0x66, 0x65, 0x73, 0x6b, 0x66, 0x6d, 0x7a, 0x36, 0x7a, 0x71, 0x69, 0x35, 0x77, 0xa, 0x42, 0x6e, 0x6f, 0x39, 0x77, 0x79, 0x2b, 0x33, 0x63, 0x45, 0x37, 0x45, 0x56, 0x45, 0x4d, 0x44, 0x35, 0x65, 0x4f, 0x34, 0x53, 0x34, 0x49, 0x4d, 0x6d, 0x6f, 0x56, 0x6a, 0x55, 0x54, 0x6e, 0x4d, 0x61, 0x6e, 0x74, 0x4f, 0x32, 0x34, 0x52, 0x36, 0x71, 0x4d, 0x6c, 0x74, 0x41, 0x6e, 0x2f, 0x59, 0x6f, 0x31, 0x67, 0x63, 0x6f, 0x38, 0x75, 0x37, 0x6f, 0x48, 0x6f, 0x63, 0x67, 0x4e, 0x46, 0x78, 0xa, 0x46, 0x56, 0x51, 0x6a, 0x79, 0x69, 0x56, 0x48, 0x54, 0x6f, 0x59, 0x5a, 0x70, 0x41, 0x41, 0x4a, 0x61, 0x73, 0x2b, 0x39, 0x61, 0x35, 0x5a, 0x74, 0x53, 0x6e, 0x46, 0x5a, 0x68, 0x7a, 0x44, 0x51, 0x31, 0x41, 0x47, 0x39, 0x6c, 0x58, 0x78, 0x45, 0x43, 0x42, 0x42, 0x51, 0x79, 0x42, 0x59, 0x63, 0x76, 0x74, 0x51, 0x32, 0x2b, 0x73, 0x31, 0x6c, 0x4d, 0x70, 0x62, 0x45, 0x6b, 0x61, 0x6a, 0x4e, 0xa, 0x5a, 0x2b, 0x78, 0x50, 0x73, 0x48, 0x7a, 0x55, 0x7a, 0x62, 0x65, 0x48, 0x4e, 0x36, 0x55, 0x54, 0x76, 0x74, 0x41, 0x59, 0x51, 0x41, 0x35, 0x33, 0x46, 0x70, 0x31, 0x6c, 0x53, 0x34, 0x58, 0x64, 0x66, 0x45, 0x64, 0x38, 0x44, 0x65, 0x79, 0x36, 0x79, 0x72, 0x66, 0x7a, 0x46, 0x6e, 0x2b, 0x31, 0x4f, 0x39, 0x76, 0x30, 0x58, 0x6f, 0x59, 0x34, 0x65, 0x52, 0x58, 0x57, 0x37, 0x62, 0x59, 0x32, 0xa, 0x4d, 0x77, 0x6c, 0x55, 0x77, 0x4e, 0x59, 0x67, 0x4a, 0x35, 0x37, 0x58, 0x54, 0x68, 0x36, 0x59, 0x68, 0x42, 0x4d, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4a, 0x52, 0x54, 0x41, 0x6b, 0x4e, 0x45, 0x4f, 0x48, 0x79, 0x2f, 0x48, 0x37, 0x65, 0x54, 0x44, 0x2b, 0x39, 0x77, 0x47, 0x76, 0x77, 0x36, 0x39, 0x50, 0x6a, 0x46, 0xa, 0x66, 0x74, 0x6d, 0x4b, 0x6c, 0x77, 0x42, 0x30, 0x37, 0x4b, 0x6d, 0x59, 0x45, 0x70, 0x72, 0x47, 0x49, 0x69, 0x38, 0x2f, 0x57, 0x6b, 0x6c, 0x67, 0x58, 0x41, 0x74, 0x47, 0x5a, 0x70, 0x34, 0x42, 0x4e, 0x36, 0x59, 0x4c, 0x5a, 0x51, 0x42, 0x57, 0x42, 0x4d, 0x37, 0x61, 0x78, 0x4a, 0x74, 0x33, 0x64, 0x47, 0x68, 0x76, 0x35, 0x48, 0x51, 0x30, 0x44, 0x59, 0x41, 0x76, 0x51, 0x78, 0x73, 0x57, 0xa, 0x50, 0x4d, 0x43, 0x4d, 0x46, 0x43, 0x45, 0x61, 0x78, 0x63, 0x4a, 0x4e, 0x78, 0x33, 0x32, 0x34, 0x62, 0x54, 0x53, 0x75, 0x35, 0x4b, 0x74, 0x65, 0x2b, 0x38, 0x70, 0x6f, 0x70, 0x77, 0x78, 0x2f, 0x70, 0x2f, 0x35, 0x41, 0x5a, 0x4a, 0x6c, 0x46, 0x6b, 0x6e, 0x39, 0x32, 0x75, 0x32, 0x48, 0x44, 0x5a, 0x35, 0x79, 0x37, 0x30, 0x62, 0x37, 0x57, 0x4c, 0x37, 0x65, 0x72, 0x65, 0x37, 0x2b, 0x65, 0xa, 0x4e, 0x69, 0x34, 0x31, 0x75, 0x4e, 0x61, 0x2b, 0x68, 0x47, 0x79, 0x4e, 0x67, 0x6c, 0x6f, 0x75, 0x55, 0x33, 0x57, 0x5a, 0x34, 0x78, 0x66, 0x70, 0x57, 0x54, 0x4e, 0x33, 0x71, 0x71, 0x78, 0x44, 0x59, 0x73, 0x57, 0x32, 0x74, 0x43, 0x52, 0x46, 0x41, 0x61, 0x4d, 0x79, 0x67, 0x4d, 0x56, 0x62, 0x78, 0x53, 0x75, 0x31, 0x6b, 0x38, 0x59, 0x48, 0x64, 0x47, 0x55, 0x59, 0x58, 0x6e, 0x5a, 0x6e, 0xa, 0x66, 0x64, 0x44, 0x31, 0x52, 0x77, 0x71, 0x6a, 0x62, 0x4f, 0x5a, 0x78, 0x47, 0x73, 0x75, 0x34, 0x4b, 0x50, 0x38, 0x30, 0x6d, 0x59, 0x71, 0x73, 0x63, 0x54, 0x50, 0x45, 0x74, 0x69, 0x51, 0x54, 0x74, 0x78, 0x2f, 0x2f, 0x6b, 0x46, 0x76, 0x6c, 0x4d, 0x41, 0x32, 0x6a, 0x5a, 0x4a, 0x69, 0x43, 0x62, 0x61, 0x65, 0x45, 0x4f, 0x45, 0x56, 0x72, 0x43, 0x2f, 0x51, 0x49, 0x2f, 0x69, 0x57, 0x71, 0xa, 0x6d, 0x48, 0x63, 0x68, 0x4e, 0x55, 0x44, 0x72, 0x4f, 0x75, 0x41, 0x54, 0x68, 0x2f, 0x33, 0x7a, 0x76, 0x68, 0x4c, 0x75, 0x79, 0x61, 0x70, 0x65, 0x36, 0x4b, 0x77, 0x58, 0x6e, 0x4b, 0x73, 0x46, 0x41, 0x48, 0x54, 0x41, 0x68, 0x51, 0x39, 0x2b, 0x52, 0x38, 0x72, 0x4e, 0x55, 0x33, 0x51, 0x6d, 0x64, 0x2f, 0x36, 0x35, 0x63, 0x39, 0x4b, 0x6c, 0x6d, 0x35, 0x55, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/05/18 16:42:40 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
     }
    }
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/05/18 16:42:40 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/05/18 16:42:40 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/05/18 16:42:40 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc00002e000)({
 Object: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
  (string) (len=4) "kind": (string) (len=10) "Middleware",
  (string) (len=8) "metadata": (map[string]interface {}) (len=8) {
   (string) (len=15) "resourceVersion": (string) (len=5) "10985",
   (string) (len=8) "selfLink": (string) (len=86) "/apis/traefik.containo.us/v1alpha1/namespaces/default/middlewares/requestheaders-https",
   (string) (len=3) "uid": (string) (len=36) "bdda159c-40e8-4fff-b4c9-1fbbc2330c87",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-05-18T13:42:41Z",
   (string) (len=10) "generation": (int64) 1,
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=7) "manager": (string) (len=9) "Terraform",
     (string) (len=9) "operation": (string) (len=5) "Apply",
     (string) (len=4) "time": (string) (len=20) "2021-05-18T13:42:41Z",
     (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=1) {
      (string) (len=6) "f:spec": (map[string]interface {}) (len=2) {
       (string) (len=1) ".": (map[string]interface {}) {
       },
       (string) (len=9) "f:headers": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=22) "f:customRequestHeaders": (map[string]interface {}) (len=3) {
         (string) (len=18) "f:X-Forwarded-Port": (map[string]interface {}) {
         },
         (string) (len=19) "f:X-Forwarded-Proto": (map[string]interface {}) {
         },
         (string) (len=1) ".": (map[string]interface {}) {
         }
        }
       }
      }
     }
    }
   },
   (string) (len=4) "name": (string) (len=20) "requestheaders-https",
   (string) (len=9) "namespace": (string) (len=7) "default"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=7) "headers": (map[string]interface {}) (len=1) {
    (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
     (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
     (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
    }
   }
  }
 }
})

RAW provider 2021/05/18 16:42:40 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=9) "namespace": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=7) "headers": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=20) "customRequestHeaders": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=16) "X-Forwarded-Port": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
  (string) (len=4) "kind": (string) (len=10) "Middleware",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=4) "name": (string) (len=20) "requestheaders-https",
   (string) (len=9) "namespace": (string) (len=7) "default"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=7) "headers": (map[string]interface {}) (len=1) {
    (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
     (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
     (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
    }
   }
  }
 }
}

RAW provider 2021/05/18 16:42:40 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=9) "namespace": (string) (len=7) "default",
    (string) (len=4) "name": (string) (len=20) "requestheaders-https"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https",
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443"
     }
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}
RAW provider 2021/05/18 16:42:40 Finished
RAW provider 2021/05/18 16:46:14 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:46:14 Finished
RAW provider 2021/05/18 16:46:15 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:46:15 Finished
RAW provider 2021/05/18 16:46:15 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:46:15 Finished
RAW provider 2021/05/18 16:46:19 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:46:19 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://58AE7D8133931B46B4954D1176749064.yl4.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4f, 0x44, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4e, 0x6a, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4b, 0x6c, 0x4b, 0xa, 0x72, 0x5a, 0x6d, 0x45, 0x51, 0x39, 0x76, 0x68, 0x66, 0x65, 0x45, 0x75, 0x46, 0x65, 0x30, 0x55, 0x32, 0x55, 0x71, 0x35, 0x52, 0x2b, 0x44, 0x61, 0x4d, 0x62, 0x36, 0x4e, 0x76, 0x31, 0x47, 0x6d, 0x7a, 0x4c, 0x30, 0x52, 0x74, 0x4f, 0x50, 0x47, 0x34, 0x56, 0x42, 0x71, 0x34, 0x43, 0x61, 0x72, 0x31, 0x68, 0x59, 0x38, 0x57, 0x76, 0x31, 0x41, 0x42, 0x34, 0x6d, 0x62, 0x51, 0x6e, 0x32, 0x4e, 0xa, 0x50, 0x76, 0x54, 0x2b, 0x34, 0x38, 0x76, 0x61, 0x2b, 0x69, 0x6f, 0x57, 0x34, 0x50, 0x59, 0x61, 0x4e, 0x71, 0x6a, 0x4c, 0x66, 0x57, 0x65, 0x32, 0x46, 0x48, 0x31, 0x55, 0x6c, 0x76, 0x65, 0x4f, 0x50, 0x41, 0x73, 0x33, 0x6e, 0x68, 0x31, 0x4b, 0x39, 0x45, 0x73, 0x63, 0x39, 0x57, 0x79, 0x46, 0x66, 0x78, 0x43, 0x66, 0x65, 0x73, 0x6b, 0x66, 0x6d, 0x7a, 0x36, 0x7a, 0x71, 0x69, 0x35, 0x77, 0xa, 0x42, 0x6e, 0x6f, 0x39, 0x77, 0x79, 0x2b, 0x33, 0x63, 0x45, 0x37, 0x45, 0x56, 0x45, 0x4d, 0x44, 0x35, 0x65, 0x4f, 0x34, 0x53, 0x34, 0x49, 0x4d, 0x6d, 0x6f, 0x56, 0x6a, 0x55, 0x54, 0x6e, 0x4d, 0x61, 0x6e, 0x74, 0x4f, 0x32, 0x34, 0x52, 0x36, 0x71, 0x4d, 0x6c, 0x74, 0x41, 0x6e, 0x2f, 0x59, 0x6f, 0x31, 0x67, 0x63, 0x6f, 0x38, 0x75, 0x37, 0x6f, 0x48, 0x6f, 0x63, 0x67, 0x4e, 0x46, 0x78, 0xa, 0x46, 0x56, 0x51, 0x6a, 0x79, 0x69, 0x56, 0x48, 0x54, 0x6f, 0x59, 0x5a, 0x70, 0x41, 0x41, 0x4a, 0x61, 0x73, 0x2b, 0x39, 0x61, 0x35, 0x5a, 0x74, 0x53, 0x6e, 0x46, 0x5a, 0x68, 0x7a, 0x44, 0x51, 0x31, 0x41, 0x47, 0x39, 0x6c, 0x58, 0x78, 0x45, 0x43, 0x42, 0x42, 0x51, 0x79, 0x42, 0x59, 0x63, 0x76, 0x74, 0x51, 0x32, 0x2b, 0x73, 0x31, 0x6c, 0x4d, 0x70, 0x62, 0x45, 0x6b, 0x61, 0x6a, 0x4e, 0xa, 0x5a, 0x2b, 0x78, 0x50, 0x73, 0x48, 0x7a, 0x55, 0x7a, 0x62, 0x65, 0x48, 0x4e, 0x36, 0x55, 0x54, 0x76, 0x74, 0x41, 0x59, 0x51, 0x41, 0x35, 0x33, 0x46, 0x70, 0x31, 0x6c, 0x53, 0x34, 0x58, 0x64, 0x66, 0x45, 0x64, 0x38, 0x44, 0x65, 0x79, 0x36, 0x79, 0x72, 0x66, 0x7a, 0x46, 0x6e, 0x2b, 0x31, 0x4f, 0x39, 0x76, 0x30, 0x58, 0x6f, 0x59, 0x34, 0x65, 0x52, 0x58, 0x57, 0x37, 0x62, 0x59, 0x32, 0xa, 0x4d, 0x77, 0x6c, 0x55, 0x77, 0x4e, 0x59, 0x67, 0x4a, 0x35, 0x37, 0x58, 0x54, 0x68, 0x36, 0x59, 0x68, 0x42, 0x4d, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4a, 0x52, 0x54, 0x41, 0x6b, 0x4e, 0x45, 0x4f, 0x48, 0x79, 0x2f, 0x48, 0x37, 0x65, 0x54, 0x44, 0x2b, 0x39, 0x77, 0x47, 0x76, 0x77, 0x36, 0x39, 0x50, 0x6a, 0x46, 0xa, 0x66, 0x74, 0x6d, 0x4b, 0x6c, 0x77, 0x42, 0x30, 0x37, 0x4b, 0x6d, 0x59, 0x45, 0x70, 0x72, 0x47, 0x49, 0x69, 0x38, 0x2f, 0x57, 0x6b, 0x6c, 0x67, 0x58, 0x41, 0x74, 0x47, 0x5a, 0x70, 0x34, 0x42, 0x4e, 0x36, 0x59, 0x4c, 0x5a, 0x51, 0x42, 0x57, 0x42, 0x4d, 0x37, 0x61, 0x78, 0x4a, 0x74, 0x33, 0x64, 0x47, 0x68, 0x76, 0x35, 0x48, 0x51, 0x30, 0x44, 0x59, 0x41, 0x76, 0x51, 0x78, 0x73, 0x57, 0xa, 0x50, 0x4d, 0x43, 0x4d, 0x46, 0x43, 0x45, 0x61, 0x78, 0x63, 0x4a, 0x4e, 0x78, 0x33, 0x32, 0x34, 0x62, 0x54, 0x53, 0x75, 0x35, 0x4b, 0x74, 0x65, 0x2b, 0x38, 0x70, 0x6f, 0x70, 0x77, 0x78, 0x2f, 0x70, 0x2f, 0x35, 0x41, 0x5a, 0x4a, 0x6c, 0x46, 0x6b, 0x6e, 0x39, 0x32, 0x75, 0x32, 0x48, 0x44, 0x5a, 0x35, 0x79, 0x37, 0x30, 0x62, 0x37, 0x57, 0x4c, 0x37, 0x65, 0x72, 0x65, 0x37, 0x2b, 0x65, 0xa, 0x4e, 0x69, 0x34, 0x31, 0x75, 0x4e, 0x61, 0x2b, 0x68, 0x47, 0x79, 0x4e, 0x67, 0x6c, 0x6f, 0x75, 0x55, 0x33, 0x57, 0x5a, 0x34, 0x78, 0x66, 0x70, 0x57, 0x54, 0x4e, 0x33, 0x71, 0x71, 0x78, 0x44, 0x59, 0x73, 0x57, 0x32, 0x74, 0x43, 0x52, 0x46, 0x41, 0x61, 0x4d, 0x79, 0x67, 0x4d, 0x56, 0x62, 0x78, 0x53, 0x75, 0x31, 0x6b, 0x38, 0x59, 0x48, 0x64, 0x47, 0x55, 0x59, 0x58, 0x6e, 0x5a, 0x6e, 0xa, 0x66, 0x64, 0x44, 0x31, 0x52, 0x77, 0x71, 0x6a, 0x62, 0x4f, 0x5a, 0x78, 0x47, 0x73, 0x75, 0x34, 0x4b, 0x50, 0x38, 0x30, 0x6d, 0x59, 0x71, 0x73, 0x63, 0x54, 0x50, 0x45, 0x74, 0x69, 0x51, 0x54, 0x74, 0x78, 0x2f, 0x2f, 0x6b, 0x46, 0x76, 0x6c, 0x4d, 0x41, 0x32, 0x6a, 0x5a, 0x4a, 0x69, 0x43, 0x62, 0x61, 0x65, 0x45, 0x4f, 0x45, 0x56, 0x72, 0x43, 0x2f, 0x51, 0x49, 0x2f, 0x69, 0x57, 0x71, 0xa, 0x6d, 0x48, 0x63, 0x68, 0x4e, 0x55, 0x44, 0x72, 0x4f, 0x75, 0x41, 0x54, 0x68, 0x2f, 0x33, 0x7a, 0x76, 0x68, 0x4c, 0x75, 0x79, 0x61, 0x70, 0x65, 0x36, 0x4b, 0x77, 0x58, 0x6e, 0x4b, 0x73, 0x46, 0x41, 0x48, 0x54, 0x41, 0x68, 0x51, 0x39, 0x2b, 0x52, 0x38, 0x72, 0x4e, 0x55, 0x33, 0x51, 0x6d, 0x64, 0x2f, 0x36, 0x35, 0x63, 0x39, 0x4b, 0x6c, 0x6d, 0x35, 0x55, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/05/18 16:46:19 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/05/18 16:46:19 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
     }
    }
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https",
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443"
     }
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/05/18 16:46:19 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/05/18 16:46:19 Finished
RAW provider 2021/05/18 16:46:53 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:46:53 Finished
RAW provider 2021/05/18 16:46:53 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:46:54 Finished
RAW provider 2021/05/18 16:46:56 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:46:56 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://58AE7D8133931B46B4954D1176749064.yl4.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4f, 0x44, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4e, 0x6a, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4b, 0x6c, 0x4b, 0xa, 0x72, 0x5a, 0x6d, 0x45, 0x51, 0x39, 0x76, 0x68, 0x66, 0x65, 0x45, 0x75, 0x46, 0x65, 0x30, 0x55, 0x32, 0x55, 0x71, 0x35, 0x52, 0x2b, 0x44, 0x61, 0x4d, 0x62, 0x36, 0x4e, 0x76, 0x31, 0x47, 0x6d, 0x7a, 0x4c, 0x30, 0x52, 0x74, 0x4f, 0x50, 0x47, 0x34, 0x56, 0x42, 0x71, 0x34, 0x43, 0x61, 0x72, 0x31, 0x68, 0x59, 0x38, 0x57, 0x76, 0x31, 0x41, 0x42, 0x34, 0x6d, 0x62, 0x51, 0x6e, 0x32, 0x4e, 0xa, 0x50, 0x76, 0x54, 0x2b, 0x34, 0x38, 0x76, 0x61, 0x2b, 0x69, 0x6f, 0x57, 0x34, 0x50, 0x59, 0x61, 0x4e, 0x71, 0x6a, 0x4c, 0x66, 0x57, 0x65, 0x32, 0x46, 0x48, 0x31, 0x55, 0x6c, 0x76, 0x65, 0x4f, 0x50, 0x41, 0x73, 0x33, 0x6e, 0x68, 0x31, 0x4b, 0x39, 0x45, 0x73, 0x63, 0x39, 0x57, 0x79, 0x46, 0x66, 0x78, 0x43, 0x66, 0x65, 0x73, 0x6b, 0x66, 0x6d, 0x7a, 0x36, 0x7a, 0x71, 0x69, 0x35, 0x77, 0xa, 0x42, 0x6e, 0x6f, 0x39, 0x77, 0x79, 0x2b, 0x33, 0x63, 0x45, 0x37, 0x45, 0x56, 0x45, 0x4d, 0x44, 0x35, 0x65, 0x4f, 0x34, 0x53, 0x34, 0x49, 0x4d, 0x6d, 0x6f, 0x56, 0x6a, 0x55, 0x54, 0x6e, 0x4d, 0x61, 0x6e, 0x74, 0x4f, 0x32, 0x34, 0x52, 0x36, 0x71, 0x4d, 0x6c, 0x74, 0x41, 0x6e, 0x2f, 0x59, 0x6f, 0x31, 0x67, 0x63, 0x6f, 0x38, 0x75, 0x37, 0x6f, 0x48, 0x6f, 0x63, 0x67, 0x4e, 0x46, 0x78, 0xa, 0x46, 0x56, 0x51, 0x6a, 0x79, 0x69, 0x56, 0x48, 0x54, 0x6f, 0x59, 0x5a, 0x70, 0x41, 0x41, 0x4a, 0x61, 0x73, 0x2b, 0x39, 0x61, 0x35, 0x5a, 0x74, 0x53, 0x6e, 0x46, 0x5a, 0x68, 0x7a, 0x44, 0x51, 0x31, 0x41, 0x47, 0x39, 0x6c, 0x58, 0x78, 0x45, 0x43, 0x42, 0x42, 0x51, 0x79, 0x42, 0x59, 0x63, 0x76, 0x74, 0x51, 0x32, 0x2b, 0x73, 0x31, 0x6c, 0x4d, 0x70, 0x62, 0x45, 0x6b, 0x61, 0x6a, 0x4e, 0xa, 0x5a, 0x2b, 0x78, 0x50, 0x73, 0x48, 0x7a, 0x55, 0x7a, 0x62, 0x65, 0x48, 0x4e, 0x36, 0x55, 0x54, 0x76, 0x74, 0x41, 0x59, 0x51, 0x41, 0x35, 0x33, 0x46, 0x70, 0x31, 0x6c, 0x53, 0x34, 0x58, 0x64, 0x66, 0x45, 0x64, 0x38, 0x44, 0x65, 0x79, 0x36, 0x79, 0x72, 0x66, 0x7a, 0x46, 0x6e, 0x2b, 0x31, 0x4f, 0x39, 0x76, 0x30, 0x58, 0x6f, 0x59, 0x34, 0x65, 0x52, 0x58, 0x57, 0x37, 0x62, 0x59, 0x32, 0xa, 0x4d, 0x77, 0x6c, 0x55, 0x77, 0x4e, 0x59, 0x67, 0x4a, 0x35, 0x37, 0x58, 0x54, 0x68, 0x36, 0x59, 0x68, 0x42, 0x4d, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4a, 0x52, 0x54, 0x41, 0x6b, 0x4e, 0x45, 0x4f, 0x48, 0x79, 0x2f, 0x48, 0x37, 0x65, 0x54, 0x44, 0x2b, 0x39, 0x77, 0x47, 0x76, 0x77, 0x36, 0x39, 0x50, 0x6a, 0x46, 0xa, 0x66, 0x74, 0x6d, 0x4b, 0x6c, 0x77, 0x42, 0x30, 0x37, 0x4b, 0x6d, 0x59, 0x45, 0x70, 0x72, 0x47, 0x49, 0x69, 0x38, 0x2f, 0x57, 0x6b, 0x6c, 0x67, 0x58, 0x41, 0x74, 0x47, 0x5a, 0x70, 0x34, 0x42, 0x4e, 0x36, 0x59, 0x4c, 0x5a, 0x51, 0x42, 0x57, 0x42, 0x4d, 0x37, 0x61, 0x78, 0x4a, 0x74, 0x33, 0x64, 0x47, 0x68, 0x76, 0x35, 0x48, 0x51, 0x30, 0x44, 0x59, 0x41, 0x76, 0x51, 0x78, 0x73, 0x57, 0xa, 0x50, 0x4d, 0x43, 0x4d, 0x46, 0x43, 0x45, 0x61, 0x78, 0x63, 0x4a, 0x4e, 0x78, 0x33, 0x32, 0x34, 0x62, 0x54, 0x53, 0x75, 0x35, 0x4b, 0x74, 0x65, 0x2b, 0x38, 0x70, 0x6f, 0x70, 0x77, 0x78, 0x2f, 0x70, 0x2f, 0x35, 0x41, 0x5a, 0x4a, 0x6c, 0x46, 0x6b, 0x6e, 0x39, 0x32, 0x75, 0x32, 0x48, 0x44, 0x5a, 0x35, 0x79, 0x37, 0x30, 0x62, 0x37, 0x57, 0x4c, 0x37, 0x65, 0x72, 0x65, 0x37, 0x2b, 0x65, 0xa, 0x4e, 0x69, 0x34, 0x31, 0x75, 0x4e, 0x61, 0x2b, 0x68, 0x47, 0x79, 0x4e, 0x67, 0x6c, 0x6f, 0x75, 0x55, 0x33, 0x57, 0x5a, 0x34, 0x78, 0x66, 0x70, 0x57, 0x54, 0x4e, 0x33, 0x71, 0x71, 0x78, 0x44, 0x59, 0x73, 0x57, 0x32, 0x74, 0x43, 0x52, 0x46, 0x41, 0x61, 0x4d, 0x79, 0x67, 0x4d, 0x56, 0x62, 0x78, 0x53, 0x75, 0x31, 0x6b, 0x38, 0x59, 0x48, 0x64, 0x47, 0x55, 0x59, 0x58, 0x6e, 0x5a, 0x6e, 0xa, 0x66, 0x64, 0x44, 0x31, 0x52, 0x77, 0x71, 0x6a, 0x62, 0x4f, 0x5a, 0x78, 0x47, 0x73, 0x75, 0x34, 0x4b, 0x50, 0x38, 0x30, 0x6d, 0x59, 0x71, 0x73, 0x63, 0x54, 0x50, 0x45, 0x74, 0x69, 0x51, 0x54, 0x74, 0x78, 0x2f, 0x2f, 0x6b, 0x46, 0x76, 0x6c, 0x4d, 0x41, 0x32, 0x6a, 0x5a, 0x4a, 0x69, 0x43, 0x62, 0x61, 0x65, 0x45, 0x4f, 0x45, 0x56, 0x72, 0x43, 0x2f, 0x51, 0x49, 0x2f, 0x69, 0x57, 0x71, 0xa, 0x6d, 0x48, 0x63, 0x68, 0x4e, 0x55, 0x44, 0x72, 0x4f, 0x75, 0x41, 0x54, 0x68, 0x2f, 0x33, 0x7a, 0x76, 0x68, 0x4c, 0x75, 0x79, 0x61, 0x70, 0x65, 0x36, 0x4b, 0x77, 0x58, 0x6e, 0x4b, 0x73, 0x46, 0x41, 0x48, 0x54, 0x41, 0x68, 0x51, 0x39, 0x2b, 0x52, 0x38, 0x72, 0x4e, 0x55, 0x33, 0x51, 0x6d, 0x64, 0x2f, 0x36, 0x35, 0x63, 0x39, 0x4b, 0x6c, 0x6d, 0x35, 0x55, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/05/18 16:46:57 Finished
RAW provider 2021/05/18 16:47:06 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:47:06 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://58AE7D8133931B46B4954D1176749064.yl4.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4f, 0x44, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4e, 0x6a, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4b, 0x6c, 0x4b, 0xa, 0x72, 0x5a, 0x6d, 0x45, 0x51, 0x39, 0x76, 0x68, 0x66, 0x65, 0x45, 0x75, 0x46, 0x65, 0x30, 0x55, 0x32, 0x55, 0x71, 0x35, 0x52, 0x2b, 0x44, 0x61, 0x4d, 0x62, 0x36, 0x4e, 0x76, 0x31, 0x47, 0x6d, 0x7a, 0x4c, 0x30, 0x52, 0x74, 0x4f, 0x50, 0x47, 0x34, 0x56, 0x42, 0x71, 0x34, 0x43, 0x61, 0x72, 0x31, 0x68, 0x59, 0x38, 0x57, 0x76, 0x31, 0x41, 0x42, 0x34, 0x6d, 0x62, 0x51, 0x6e, 0x32, 0x4e, 0xa, 0x50, 0x76, 0x54, 0x2b, 0x34, 0x38, 0x76, 0x61, 0x2b, 0x69, 0x6f, 0x57, 0x34, 0x50, 0x59, 0x61, 0x4e, 0x71, 0x6a, 0x4c, 0x66, 0x57, 0x65, 0x32, 0x46, 0x48, 0x31, 0x55, 0x6c, 0x76, 0x65, 0x4f, 0x50, 0x41, 0x73, 0x33, 0x6e, 0x68, 0x31, 0x4b, 0x39, 0x45, 0x73, 0x63, 0x39, 0x57, 0x79, 0x46, 0x66, 0x78, 0x43, 0x66, 0x65, 0x73, 0x6b, 0x66, 0x6d, 0x7a, 0x36, 0x7a, 0x71, 0x69, 0x35, 0x77, 0xa, 0x42, 0x6e, 0x6f, 0x39, 0x77, 0x79, 0x2b, 0x33, 0x63, 0x45, 0x37, 0x45, 0x56, 0x45, 0x4d, 0x44, 0x35, 0x65, 0x4f, 0x34, 0x53, 0x34, 0x49, 0x4d, 0x6d, 0x6f, 0x56, 0x6a, 0x55, 0x54, 0x6e, 0x4d, 0x61, 0x6e, 0x74, 0x4f, 0x32, 0x34, 0x52, 0x36, 0x71, 0x4d, 0x6c, 0x74, 0x41, 0x6e, 0x2f, 0x59, 0x6f, 0x31, 0x67, 0x63, 0x6f, 0x38, 0x75, 0x37, 0x6f, 0x48, 0x6f, 0x63, 0x67, 0x4e, 0x46, 0x78, 0xa, 0x46, 0x56, 0x51, 0x6a, 0x79, 0x69, 0x56, 0x48, 0x54, 0x6f, 0x59, 0x5a, 0x70, 0x41, 0x41, 0x4a, 0x61, 0x73, 0x2b, 0x39, 0x61, 0x35, 0x5a, 0x74, 0x53, 0x6e, 0x46, 0x5a, 0x68, 0x7a, 0x44, 0x51, 0x31, 0x41, 0x47, 0x39, 0x6c, 0x58, 0x78, 0x45, 0x43, 0x42, 0x42, 0x51, 0x79, 0x42, 0x59, 0x63, 0x76, 0x74, 0x51, 0x32, 0x2b, 0x73, 0x31, 0x6c, 0x4d, 0x70, 0x62, 0x45, 0x6b, 0x61, 0x6a, 0x4e, 0xa, 0x5a, 0x2b, 0x78, 0x50, 0x73, 0x48, 0x7a, 0x55, 0x7a, 0x62, 0x65, 0x48, 0x4e, 0x36, 0x55, 0x54, 0x76, 0x74, 0x41, 0x59, 0x51, 0x41, 0x35, 0x33, 0x46, 0x70, 0x31, 0x6c, 0x53, 0x34, 0x58, 0x64, 0x66, 0x45, 0x64, 0x38, 0x44, 0x65, 0x79, 0x36, 0x79, 0x72, 0x66, 0x7a, 0x46, 0x6e, 0x2b, 0x31, 0x4f, 0x39, 0x76, 0x30, 0x58, 0x6f, 0x59, 0x34, 0x65, 0x52, 0x58, 0x57, 0x37, 0x62, 0x59, 0x32, 0xa, 0x4d, 0x77, 0x6c, 0x55, 0x77, 0x4e, 0x59, 0x67, 0x4a, 0x35, 0x37, 0x58, 0x54, 0x68, 0x36, 0x59, 0x68, 0x42, 0x4d, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4a, 0x52, 0x54, 0x41, 0x6b, 0x4e, 0x45, 0x4f, 0x48, 0x79, 0x2f, 0x48, 0x37, 0x65, 0x54, 0x44, 0x2b, 0x39, 0x77, 0x47, 0x76, 0x77, 0x36, 0x39, 0x50, 0x6a, 0x46, 0xa, 0x66, 0x74, 0x6d, 0x4b, 0x6c, 0x77, 0x42, 0x30, 0x37, 0x4b, 0x6d, 0x59, 0x45, 0x70, 0x72, 0x47, 0x49, 0x69, 0x38, 0x2f, 0x57, 0x6b, 0x6c, 0x67, 0x58, 0x41, 0x74, 0x47, 0x5a, 0x70, 0x34, 0x42, 0x4e, 0x36, 0x59, 0x4c, 0x5a, 0x51, 0x42, 0x57, 0x42, 0x4d, 0x37, 0x61, 0x78, 0x4a, 0x74, 0x33, 0x64, 0x47, 0x68, 0x76, 0x35, 0x48, 0x51, 0x30, 0x44, 0x59, 0x41, 0x76, 0x51, 0x78, 0x73, 0x57, 0xa, 0x50, 0x4d, 0x43, 0x4d, 0x46, 0x43, 0x45, 0x61, 0x78, 0x63, 0x4a, 0x4e, 0x78, 0x33, 0x32, 0x34, 0x62, 0x54, 0x53, 0x75, 0x35, 0x4b, 0x74, 0x65, 0x2b, 0x38, 0x70, 0x6f, 0x70, 0x77, 0x78, 0x2f, 0x70, 0x2f, 0x35, 0x41, 0x5a, 0x4a, 0x6c, 0x46, 0x6b, 0x6e, 0x39, 0x32, 0x75, 0x32, 0x48, 0x44, 0x5a, 0x35, 0x79, 0x37, 0x30, 0x62, 0x37, 0x57, 0x4c, 0x37, 0x65, 0x72, 0x65, 0x37, 0x2b, 0x65, 0xa, 0x4e, 0x69, 0x34, 0x31, 0x75, 0x4e, 0x61, 0x2b, 0x68, 0x47, 0x79, 0x4e, 0x67, 0x6c, 0x6f, 0x75, 0x55, 0x33, 0x57, 0x5a, 0x34, 0x78, 0x66, 0x70, 0x57, 0x54, 0x4e, 0x33, 0x71, 0x71, 0x78, 0x44, 0x59, 0x73, 0x57, 0x32, 0x74, 0x43, 0x52, 0x46, 0x41, 0x61, 0x4d, 0x79, 0x67, 0x4d, 0x56, 0x62, 0x78, 0x53, 0x75, 0x31, 0x6b, 0x38, 0x59, 0x48, 0x64, 0x47, 0x55, 0x59, 0x58, 0x6e, 0x5a, 0x6e, 0xa, 0x66, 0x64, 0x44, 0x31, 0x52, 0x77, 0x71, 0x6a, 0x62, 0x4f, 0x5a, 0x78, 0x47, 0x73, 0x75, 0x34, 0x4b, 0x50, 0x38, 0x30, 0x6d, 0x59, 0x71, 0x73, 0x63, 0x54, 0x50, 0x45, 0x74, 0x69, 0x51, 0x54, 0x74, 0x78, 0x2f, 0x2f, 0x6b, 0x46, 0x76, 0x6c, 0x4d, 0x41, 0x32, 0x6a, 0x5a, 0x4a, 0x69, 0x43, 0x62, 0x61, 0x65, 0x45, 0x4f, 0x45, 0x56, 0x72, 0x43, 0x2f, 0x51, 0x49, 0x2f, 0x69, 0x57, 0x71, 0xa, 0x6d, 0x48, 0x63, 0x68, 0x4e, 0x55, 0x44, 0x72, 0x4f, 0x75, 0x41, 0x54, 0x68, 0x2f, 0x33, 0x7a, 0x76, 0x68, 0x4c, 0x75, 0x79, 0x61, 0x70, 0x65, 0x36, 0x4b, 0x77, 0x58, 0x6e, 0x4b, 0x73, 0x46, 0x41, 0x48, 0x54, 0x41, 0x68, 0x51, 0x39, 0x2b, 0x52, 0x38, 0x72, 0x4e, 0x55, 0x33, 0x51, 0x6d, 0x64, 0x2f, 0x36, 0x35, 0x63, 0x39, 0x4b, 0x6c, 0x6d, 0x35, 0x55, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/05/18 16:47:07 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https",
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/05/18 16:47:07 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/05/18 16:47:07 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/05/18 16:47:07 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc0005de028)({
 Object: (map[string]interface {}) (len=4) {
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=7) "headers": (map[string]interface {}) (len=1) {
    (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
     (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
     (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
    }
   }
  },
  (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
  (string) (len=4) "kind": (string) (len=10) "Middleware",
  (string) (len=8) "metadata": (map[string]interface {}) (len=8) {
   (string) (len=9) "namespace": (string) (len=7) "default",
   (string) (len=15) "resourceVersion": (string) (len=5) "12032",
   (string) (len=8) "selfLink": (string) (len=86) "/apis/traefik.containo.us/v1alpha1/namespaces/default/middlewares/requestheaders-https",
   (string) (len=3) "uid": (string) (len=36) "0b2c53e2-4f88-4efb-ad08-27ba8e4a0645",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-05-18T13:47:07Z",
   (string) (len=10) "generation": (int64) 1,
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=1) {
      (string) (len=6) "f:spec": (map[string]interface {}) (len=2) {
       (string) (len=1) ".": (map[string]interface {}) {
       },
       (string) (len=9) "f:headers": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=22) "f:customRequestHeaders": (map[string]interface {}) (len=3) {
         (string) (len=19) "f:X-Forwarded-Proto": (map[string]interface {}) {
         },
         (string) (len=1) ".": (map[string]interface {}) {
         },
         (string) (len=18) "f:X-Forwarded-Port": (map[string]interface {}) {
         }
        }
       }
      }
     },
     (string) (len=7) "manager": (string) (len=9) "Terraform",
     (string) (len=9) "operation": (string) (len=5) "Apply",
     (string) (len=4) "time": (string) (len=20) "2021-05-18T13:47:07Z",
     (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1"
    }
   },
   (string) (len=4) "name": (string) (len=20) "requestheaders-https"
  }
 }
})

RAW provider 2021/05/18 16:47:07 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=9) "namespace": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=7) "headers": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=20) "customRequestHeaders": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=16) "X-Forwarded-Port": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
  (string) (len=4) "kind": (string) (len=10) "Middleware",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=4) "name": (string) (len=20) "requestheaders-https",
   (string) (len=9) "namespace": (string) (len=7) "default"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=7) "headers": (map[string]interface {}) (len=1) {
    (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
     (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
     (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
    }
   }
  }
 }
}

RAW provider 2021/05/18 16:47:07 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=9) "namespace": (string) (len=7) "default",
    (string) (len=4) "name": (string) (len=20) "requestheaders-https"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
     }
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}
RAW provider 2021/05/18 16:47:07 Finished
RAW provider 2021/05/18 16:49:49 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:49:49 Finished
RAW provider 2021/05/18 16:49:49 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:49:50 Finished
RAW provider 2021/05/18 16:49:52 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:49:52 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://58AE7D8133931B46B4954D1176749064.yl4.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4f, 0x44, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4e, 0x6a, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4b, 0x6c, 0x4b, 0xa, 0x72, 0x5a, 0x6d, 0x45, 0x51, 0x39, 0x76, 0x68, 0x66, 0x65, 0x45, 0x75, 0x46, 0x65, 0x30, 0x55, 0x32, 0x55, 0x71, 0x35, 0x52, 0x2b, 0x44, 0x61, 0x4d, 0x62, 0x36, 0x4e, 0x76, 0x31, 0x47, 0x6d, 0x7a, 0x4c, 0x30, 0x52, 0x74, 0x4f, 0x50, 0x47, 0x34, 0x56, 0x42, 0x71, 0x34, 0x43, 0x61, 0x72, 0x31, 0x68, 0x59, 0x38, 0x57, 0x76, 0x31, 0x41, 0x42, 0x34, 0x6d, 0x62, 0x51, 0x6e, 0x32, 0x4e, 0xa, 0x50, 0x76, 0x54, 0x2b, 0x34, 0x38, 0x76, 0x61, 0x2b, 0x69, 0x6f, 0x57, 0x34, 0x50, 0x59, 0x61, 0x4e, 0x71, 0x6a, 0x4c, 0x66, 0x57, 0x65, 0x32, 0x46, 0x48, 0x31, 0x55, 0x6c, 0x76, 0x65, 0x4f, 0x50, 0x41, 0x73, 0x33, 0x6e, 0x68, 0x31, 0x4b, 0x39, 0x45, 0x73, 0x63, 0x39, 0x57, 0x79, 0x46, 0x66, 0x78, 0x43, 0x66, 0x65, 0x73, 0x6b, 0x66, 0x6d, 0x7a, 0x36, 0x7a, 0x71, 0x69, 0x35, 0x77, 0xa, 0x42, 0x6e, 0x6f, 0x39, 0x77, 0x79, 0x2b, 0x33, 0x63, 0x45, 0x37, 0x45, 0x56, 0x45, 0x4d, 0x44, 0x35, 0x65, 0x4f, 0x34, 0x53, 0x34, 0x49, 0x4d, 0x6d, 0x6f, 0x56, 0x6a, 0x55, 0x54, 0x6e, 0x4d, 0x61, 0x6e, 0x74, 0x4f, 0x32, 0x34, 0x52, 0x36, 0x71, 0x4d, 0x6c, 0x74, 0x41, 0x6e, 0x2f, 0x59, 0x6f, 0x31, 0x67, 0x63, 0x6f, 0x38, 0x75, 0x37, 0x6f, 0x48, 0x6f, 0x63, 0x67, 0x4e, 0x46, 0x78, 0xa, 0x46, 0x56, 0x51, 0x6a, 0x79, 0x69, 0x56, 0x48, 0x54, 0x6f, 0x59, 0x5a, 0x70, 0x41, 0x41, 0x4a, 0x61, 0x73, 0x2b, 0x39, 0x61, 0x35, 0x5a, 0x74, 0x53, 0x6e, 0x46, 0x5a, 0x68, 0x7a, 0x44, 0x51, 0x31, 0x41, 0x47, 0x39, 0x6c, 0x58, 0x78, 0x45, 0x43, 0x42, 0x42, 0x51, 0x79, 0x42, 0x59, 0x63, 0x76, 0x74, 0x51, 0x32, 0x2b, 0x73, 0x31, 0x6c, 0x4d, 0x70, 0x62, 0x45, 0x6b, 0x61, 0x6a, 0x4e, 0xa, 0x5a, 0x2b, 0x78, 0x50, 0x73, 0x48, 0x7a, 0x55, 0x7a, 0x62, 0x65, 0x48, 0x4e, 0x36, 0x55, 0x54, 0x76, 0x74, 0x41, 0x59, 0x51, 0x41, 0x35, 0x33, 0x46, 0x70, 0x31, 0x6c, 0x53, 0x34, 0x58, 0x64, 0x66, 0x45, 0x64, 0x38, 0x44, 0x65, 0x79, 0x36, 0x79, 0x72, 0x66, 0x7a, 0x46, 0x6e, 0x2b, 0x31, 0x4f, 0x39, 0x76, 0x30, 0x58, 0x6f, 0x59, 0x34, 0x65, 0x52, 0x58, 0x57, 0x37, 0x62, 0x59, 0x32, 0xa, 0x4d, 0x77, 0x6c, 0x55, 0x77, 0x4e, 0x59, 0x67, 0x4a, 0x35, 0x37, 0x58, 0x54, 0x68, 0x36, 0x59, 0x68, 0x42, 0x4d, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4a, 0x52, 0x54, 0x41, 0x6b, 0x4e, 0x45, 0x4f, 0x48, 0x79, 0x2f, 0x48, 0x37, 0x65, 0x54, 0x44, 0x2b, 0x39, 0x77, 0x47, 0x76, 0x77, 0x36, 0x39, 0x50, 0x6a, 0x46, 0xa, 0x66, 0x74, 0x6d, 0x4b, 0x6c, 0x77, 0x42, 0x30, 0x37, 0x4b, 0x6d, 0x59, 0x45, 0x70, 0x72, 0x47, 0x49, 0x69, 0x38, 0x2f, 0x57, 0x6b, 0x6c, 0x67, 0x58, 0x41, 0x74, 0x47, 0x5a, 0x70, 0x34, 0x42, 0x4e, 0x36, 0x59, 0x4c, 0x5a, 0x51, 0x42, 0x57, 0x42, 0x4d, 0x37, 0x61, 0x78, 0x4a, 0x74, 0x33, 0x64, 0x47, 0x68, 0x76, 0x35, 0x48, 0x51, 0x30, 0x44, 0x59, 0x41, 0x76, 0x51, 0x78, 0x73, 0x57, 0xa, 0x50, 0x4d, 0x43, 0x4d, 0x46, 0x43, 0x45, 0x61, 0x78, 0x63, 0x4a, 0x4e, 0x78, 0x33, 0x32, 0x34, 0x62, 0x54, 0x53, 0x75, 0x35, 0x4b, 0x74, 0x65, 0x2b, 0x38, 0x70, 0x6f, 0x70, 0x77, 0x78, 0x2f, 0x70, 0x2f, 0x35, 0x41, 0x5a, 0x4a, 0x6c, 0x46, 0x6b, 0x6e, 0x39, 0x32, 0x75, 0x32, 0x48, 0x44, 0x5a, 0x35, 0x79, 0x37, 0x30, 0x62, 0x37, 0x57, 0x4c, 0x37, 0x65, 0x72, 0x65, 0x37, 0x2b, 0x65, 0xa, 0x4e, 0x69, 0x34, 0x31, 0x75, 0x4e, 0x61, 0x2b, 0x68, 0x47, 0x79, 0x4e, 0x67, 0x6c, 0x6f, 0x75, 0x55, 0x33, 0x57, 0x5a, 0x34, 0x78, 0x66, 0x70, 0x57, 0x54, 0x4e, 0x33, 0x71, 0x71, 0x78, 0x44, 0x59, 0x73, 0x57, 0x32, 0x74, 0x43, 0x52, 0x46, 0x41, 0x61, 0x4d, 0x79, 0x67, 0x4d, 0x56, 0x62, 0x78, 0x53, 0x75, 0x31, 0x6b, 0x38, 0x59, 0x48, 0x64, 0x47, 0x55, 0x59, 0x58, 0x6e, 0x5a, 0x6e, 0xa, 0x66, 0x64, 0x44, 0x31, 0x52, 0x77, 0x71, 0x6a, 0x62, 0x4f, 0x5a, 0x78, 0x47, 0x73, 0x75, 0x34, 0x4b, 0x50, 0x38, 0x30, 0x6d, 0x59, 0x71, 0x73, 0x63, 0x54, 0x50, 0x45, 0x74, 0x69, 0x51, 0x54, 0x74, 0x78, 0x2f, 0x2f, 0x6b, 0x46, 0x76, 0x6c, 0x4d, 0x41, 0x32, 0x6a, 0x5a, 0x4a, 0x69, 0x43, 0x62, 0x61, 0x65, 0x45, 0x4f, 0x45, 0x56, 0x72, 0x43, 0x2f, 0x51, 0x49, 0x2f, 0x69, 0x57, 0x71, 0xa, 0x6d, 0x48, 0x63, 0x68, 0x4e, 0x55, 0x44, 0x72, 0x4f, 0x75, 0x41, 0x54, 0x68, 0x2f, 0x33, 0x7a, 0x76, 0x68, 0x4c, 0x75, 0x79, 0x61, 0x70, 0x65, 0x36, 0x4b, 0x77, 0x58, 0x6e, 0x4b, 0x73, 0x46, 0x41, 0x48, 0x54, 0x41, 0x68, 0x51, 0x39, 0x2b, 0x52, 0x38, 0x72, 0x4e, 0x55, 0x33, 0x51, 0x6d, 0x64, 0x2f, 0x36, 0x35, 0x63, 0x39, 0x4b, 0x6c, 0x6d, 0x35, 0x55, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/05/18 16:49:53 Finished
RAW provider 2021/05/18 16:50:11 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:50:11 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://58AE7D8133931B46B4954D1176749064.yl4.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4f, 0x44, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4e, 0x6a, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4b, 0x6c, 0x4b, 0xa, 0x72, 0x5a, 0x6d, 0x45, 0x51, 0x39, 0x76, 0x68, 0x66, 0x65, 0x45, 0x75, 0x46, 0x65, 0x30, 0x55, 0x32, 0x55, 0x71, 0x35, 0x52, 0x2b, 0x44, 0x61, 0x4d, 0x62, 0x36, 0x4e, 0x76, 0x31, 0x47, 0x6d, 0x7a, 0x4c, 0x30, 0x52, 0x74, 0x4f, 0x50, 0x47, 0x34, 0x56, 0x42, 0x71, 0x34, 0x43, 0x61, 0x72, 0x31, 0x68, 0x59, 0x38, 0x57, 0x76, 0x31, 0x41, 0x42, 0x34, 0x6d, 0x62, 0x51, 0x6e, 0x32, 0x4e, 0xa, 0x50, 0x76, 0x54, 0x2b, 0x34, 0x38, 0x76, 0x61, 0x2b, 0x69, 0x6f, 0x57, 0x34, 0x50, 0x59, 0x61, 0x4e, 0x71, 0x6a, 0x4c, 0x66, 0x57, 0x65, 0x32, 0x46, 0x48, 0x31, 0x55, 0x6c, 0x76, 0x65, 0x4f, 0x50, 0x41, 0x73, 0x33, 0x6e, 0x68, 0x31, 0x4b, 0x39, 0x45, 0x73, 0x63, 0x39, 0x57, 0x79, 0x46, 0x66, 0x78, 0x43, 0x66, 0x65, 0x73, 0x6b, 0x66, 0x6d, 0x7a, 0x36, 0x7a, 0x71, 0x69, 0x35, 0x77, 0xa, 0x42, 0x6e, 0x6f, 0x39, 0x77, 0x79, 0x2b, 0x33, 0x63, 0x45, 0x37, 0x45, 0x56, 0x45, 0x4d, 0x44, 0x35, 0x65, 0x4f, 0x34, 0x53, 0x34, 0x49, 0x4d, 0x6d, 0x6f, 0x56, 0x6a, 0x55, 0x54, 0x6e, 0x4d, 0x61, 0x6e, 0x74, 0x4f, 0x32, 0x34, 0x52, 0x36, 0x71, 0x4d, 0x6c, 0x74, 0x41, 0x6e, 0x2f, 0x59, 0x6f, 0x31, 0x67, 0x63, 0x6f, 0x38, 0x75, 0x37, 0x6f, 0x48, 0x6f, 0x63, 0x67, 0x4e, 0x46, 0x78, 0xa, 0x46, 0x56, 0x51, 0x6a, 0x79, 0x69, 0x56, 0x48, 0x54, 0x6f, 0x59, 0x5a, 0x70, 0x41, 0x41, 0x4a, 0x61, 0x73, 0x2b, 0x39, 0x61, 0x35, 0x5a, 0x74, 0x53, 0x6e, 0x46, 0x5a, 0x68, 0x7a, 0x44, 0x51, 0x31, 0x41, 0x47, 0x39, 0x6c, 0x58, 0x78, 0x45, 0x43, 0x42, 0x42, 0x51, 0x79, 0x42, 0x59, 0x63, 0x76, 0x74, 0x51, 0x32, 0x2b, 0x73, 0x31, 0x6c, 0x4d, 0x70, 0x62, 0x45, 0x6b, 0x61, 0x6a, 0x4e, 0xa, 0x5a, 0x2b, 0x78, 0x50, 0x73, 0x48, 0x7a, 0x55, 0x7a, 0x62, 0x65, 0x48, 0x4e, 0x36, 0x55, 0x54, 0x76, 0x74, 0x41, 0x59, 0x51, 0x41, 0x35, 0x33, 0x46, 0x70, 0x31, 0x6c, 0x53, 0x34, 0x58, 0x64, 0x66, 0x45, 0x64, 0x38, 0x44, 0x65, 0x79, 0x36, 0x79, 0x72, 0x66, 0x7a, 0x46, 0x6e, 0x2b, 0x31, 0x4f, 0x39, 0x76, 0x30, 0x58, 0x6f, 0x59, 0x34, 0x65, 0x52, 0x58, 0x57, 0x37, 0x62, 0x59, 0x32, 0xa, 0x4d, 0x77, 0x6c, 0x55, 0x77, 0x4e, 0x59, 0x67, 0x4a, 0x35, 0x37, 0x58, 0x54, 0x68, 0x36, 0x59, 0x68, 0x42, 0x4d, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4a, 0x52, 0x54, 0x41, 0x6b, 0x4e, 0x45, 0x4f, 0x48, 0x79, 0x2f, 0x48, 0x37, 0x65, 0x54, 0x44, 0x2b, 0x39, 0x77, 0x47, 0x76, 0x77, 0x36, 0x39, 0x50, 0x6a, 0x46, 0xa, 0x66, 0x74, 0x6d, 0x4b, 0x6c, 0x77, 0x42, 0x30, 0x37, 0x4b, 0x6d, 0x59, 0x45, 0x70, 0x72, 0x47, 0x49, 0x69, 0x38, 0x2f, 0x57, 0x6b, 0x6c, 0x67, 0x58, 0x41, 0x74, 0x47, 0x5a, 0x70, 0x34, 0x42, 0x4e, 0x36, 0x59, 0x4c, 0x5a, 0x51, 0x42, 0x57, 0x42, 0x4d, 0x37, 0x61, 0x78, 0x4a, 0x74, 0x33, 0x64, 0x47, 0x68, 0x76, 0x35, 0x48, 0x51, 0x30, 0x44, 0x59, 0x41, 0x76, 0x51, 0x78, 0x73, 0x57, 0xa, 0x50, 0x4d, 0x43, 0x4d, 0x46, 0x43, 0x45, 0x61, 0x78, 0x63, 0x4a, 0x4e, 0x78, 0x33, 0x32, 0x34, 0x62, 0x54, 0x53, 0x75, 0x35, 0x4b, 0x74, 0x65, 0x2b, 0x38, 0x70, 0x6f, 0x70, 0x77, 0x78, 0x2f, 0x70, 0x2f, 0x35, 0x41, 0x5a, 0x4a, 0x6c, 0x46, 0x6b, 0x6e, 0x39, 0x32, 0x75, 0x32, 0x48, 0x44, 0x5a, 0x35, 0x79, 0x37, 0x30, 0x62, 0x37, 0x57, 0x4c, 0x37, 0x65, 0x72, 0x65, 0x37, 0x2b, 0x65, 0xa, 0x4e, 0x69, 0x34, 0x31, 0x75, 0x4e, 0x61, 0x2b, 0x68, 0x47, 0x79, 0x4e, 0x67, 0x6c, 0x6f, 0x75, 0x55, 0x33, 0x57, 0x5a, 0x34, 0x78, 0x66, 0x70, 0x57, 0x54, 0x4e, 0x33, 0x71, 0x71, 0x78, 0x44, 0x59, 0x73, 0x57, 0x32, 0x74, 0x43, 0x52, 0x46, 0x41, 0x61, 0x4d, 0x79, 0x67, 0x4d, 0x56, 0x62, 0x78, 0x53, 0x75, 0x31, 0x6b, 0x38, 0x59, 0x48, 0x64, 0x47, 0x55, 0x59, 0x58, 0x6e, 0x5a, 0x6e, 0xa, 0x66, 0x64, 0x44, 0x31, 0x52, 0x77, 0x71, 0x6a, 0x62, 0x4f, 0x5a, 0x78, 0x47, 0x73, 0x75, 0x34, 0x4b, 0x50, 0x38, 0x30, 0x6d, 0x59, 0x71, 0x73, 0x63, 0x54, 0x50, 0x45, 0x74, 0x69, 0x51, 0x54, 0x74, 0x78, 0x2f, 0x2f, 0x6b, 0x46, 0x76, 0x6c, 0x4d, 0x41, 0x32, 0x6a, 0x5a, 0x4a, 0x69, 0x43, 0x62, 0x61, 0x65, 0x45, 0x4f, 0x45, 0x56, 0x72, 0x43, 0x2f, 0x51, 0x49, 0x2f, 0x69, 0x57, 0x71, 0xa, 0x6d, 0x48, 0x63, 0x68, 0x4e, 0x55, 0x44, 0x72, 0x4f, 0x75, 0x41, 0x54, 0x68, 0x2f, 0x33, 0x7a, 0x76, 0x68, 0x4c, 0x75, 0x79, 0x61, 0x70, 0x65, 0x36, 0x4b, 0x77, 0x58, 0x6e, 0x4b, 0x73, 0x46, 0x41, 0x48, 0x54, 0x41, 0x68, 0x51, 0x39, 0x2b, 0x52, 0x38, 0x72, 0x4e, 0x55, 0x33, 0x51, 0x6d, 0x64, 0x2f, 0x36, 0x35, 0x63, 0x39, 0x4b, 0x6c, 0x6d, 0x35, 0x55, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/05/18 16:50:11 Finished
RAW provider 2021/05/18 16:56:43 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:56:43 Finished
RAW provider 2021/05/18 16:56:44 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:56:44 Finished
RAW provider 2021/05/18 16:56:45 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:56:45 Finished
RAW provider 2021/05/18 16:56:48 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/05/18 16:56:48 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://58AE7D8133931B46B4954D1176749064.yl4.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4f, 0x44, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x78, 0x4d, 0x44, 0x55, 0x78, 0x4e, 0x6a, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x77, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4b, 0x6c, 0x4b, 0xa, 0x72, 0x5a, 0x6d, 0x45, 0x51, 0x39, 0x76, 0x68, 0x66, 0x65, 0x45, 0x75, 0x46, 0x65, 0x30, 0x55, 0x32, 0x55, 0x71, 0x35, 0x52, 0x2b, 0x44, 0x61, 0x4d, 0x62, 0x36, 0x4e, 0x76, 0x31, 0x47, 0x6d, 0x7a, 0x4c, 0x30, 0x52, 0x74, 0x4f, 0x50, 0x47, 0x34, 0x56, 0x42, 0x71, 0x34, 0x43, 0x61, 0x72, 0x31, 0x68, 0x59, 0x38, 0x57, 0x76, 0x31, 0x41, 0x42, 0x34, 0x6d, 0x62, 0x51, 0x6e, 0x32, 0x4e, 0xa, 0x50, 0x76, 0x54, 0x2b, 0x34, 0x38, 0x76, 0x61, 0x2b, 0x69, 0x6f, 0x57, 0x34, 0x50, 0x59, 0x61, 0x4e, 0x71, 0x6a, 0x4c, 0x66, 0x57, 0x65, 0x32, 0x46, 0x48, 0x31, 0x55, 0x6c, 0x76, 0x65, 0x4f, 0x50, 0x41, 0x73, 0x33, 0x6e, 0x68, 0x31, 0x4b, 0x39, 0x45, 0x73, 0x63, 0x39, 0x57, 0x79, 0x46, 0x66, 0x78, 0x43, 0x66, 0x65, 0x73, 0x6b, 0x66, 0x6d, 0x7a, 0x36, 0x7a, 0x71, 0x69, 0x35, 0x77, 0xa, 0x42, 0x6e, 0x6f, 0x39, 0x77, 0x79, 0x2b, 0x33, 0x63, 0x45, 0x37, 0x45, 0x56, 0x45, 0x4d, 0x44, 0x35, 0x65, 0x4f, 0x34, 0x53, 0x34, 0x49, 0x4d, 0x6d, 0x6f, 0x56, 0x6a, 0x55, 0x54, 0x6e, 0x4d, 0x61, 0x6e, 0x74, 0x4f, 0x32, 0x34, 0x52, 0x36, 0x71, 0x4d, 0x6c, 0x74, 0x41, 0x6e, 0x2f, 0x59, 0x6f, 0x31, 0x67, 0x63, 0x6f, 0x38, 0x75, 0x37, 0x6f, 0x48, 0x6f, 0x63, 0x67, 0x4e, 0x46, 0x78, 0xa, 0x46, 0x56, 0x51, 0x6a, 0x79, 0x69, 0x56, 0x48, 0x54, 0x6f, 0x59, 0x5a, 0x70, 0x41, 0x41, 0x4a, 0x61, 0x73, 0x2b, 0x39, 0x61, 0x35, 0x5a, 0x74, 0x53, 0x6e, 0x46, 0x5a, 0x68, 0x7a, 0x44, 0x51, 0x31, 0x41, 0x47, 0x39, 0x6c, 0x58, 0x78, 0x45, 0x43, 0x42, 0x42, 0x51, 0x79, 0x42, 0x59, 0x63, 0x76, 0x74, 0x51, 0x32, 0x2b, 0x73, 0x31, 0x6c, 0x4d, 0x70, 0x62, 0x45, 0x6b, 0x61, 0x6a, 0x4e, 0xa, 0x5a, 0x2b, 0x78, 0x50, 0x73, 0x48, 0x7a, 0x55, 0x7a, 0x62, 0x65, 0x48, 0x4e, 0x36, 0x55, 0x54, 0x76, 0x74, 0x41, 0x59, 0x51, 0x41, 0x35, 0x33, 0x46, 0x70, 0x31, 0x6c, 0x53, 0x34, 0x58, 0x64, 0x66, 0x45, 0x64, 0x38, 0x44, 0x65, 0x79, 0x36, 0x79, 0x72, 0x66, 0x7a, 0x46, 0x6e, 0x2b, 0x31, 0x4f, 0x39, 0x76, 0x30, 0x58, 0x6f, 0x59, 0x34, 0x65, 0x52, 0x58, 0x57, 0x37, 0x62, 0x59, 0x32, 0xa, 0x4d, 0x77, 0x6c, 0x55, 0x77, 0x4e, 0x59, 0x67, 0x4a, 0x35, 0x37, 0x58, 0x54, 0x68, 0x36, 0x59, 0x68, 0x42, 0x4d, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4a, 0x52, 0x54, 0x41, 0x6b, 0x4e, 0x45, 0x4f, 0x48, 0x79, 0x2f, 0x48, 0x37, 0x65, 0x54, 0x44, 0x2b, 0x39, 0x77, 0x47, 0x76, 0x77, 0x36, 0x39, 0x50, 0x6a, 0x46, 0xa, 0x66, 0x74, 0x6d, 0x4b, 0x6c, 0x77, 0x42, 0x30, 0x37, 0x4b, 0x6d, 0x59, 0x45, 0x70, 0x72, 0x47, 0x49, 0x69, 0x38, 0x2f, 0x57, 0x6b, 0x6c, 0x67, 0x58, 0x41, 0x74, 0x47, 0x5a, 0x70, 0x34, 0x42, 0x4e, 0x36, 0x59, 0x4c, 0x5a, 0x51, 0x42, 0x57, 0x42, 0x4d, 0x37, 0x61, 0x78, 0x4a, 0x74, 0x33, 0x64, 0x47, 0x68, 0x76, 0x35, 0x48, 0x51, 0x30, 0x44, 0x59, 0x41, 0x76, 0x51, 0x78, 0x73, 0x57, 0xa, 0x50, 0x4d, 0x43, 0x4d, 0x46, 0x43, 0x45, 0x61, 0x78, 0x63, 0x4a, 0x4e, 0x78, 0x33, 0x32, 0x34, 0x62, 0x54, 0x53, 0x75, 0x35, 0x4b, 0x74, 0x65, 0x2b, 0x38, 0x70, 0x6f, 0x70, 0x77, 0x78, 0x2f, 0x70, 0x2f, 0x35, 0x41, 0x5a, 0x4a, 0x6c, 0x46, 0x6b, 0x6e, 0x39, 0x32, 0x75, 0x32, 0x48, 0x44, 0x5a, 0x35, 0x79, 0x37, 0x30, 0x62, 0x37, 0x57, 0x4c, 0x37, 0x65, 0x72, 0x65, 0x37, 0x2b, 0x65, 0xa, 0x4e, 0x69, 0x34, 0x31, 0x75, 0x4e, 0x61, 0x2b, 0x68, 0x47, 0x79, 0x4e, 0x67, 0x6c, 0x6f, 0x75, 0x55, 0x33, 0x57, 0x5a, 0x34, 0x78, 0x66, 0x70, 0x57, 0x54, 0x4e, 0x33, 0x71, 0x71, 0x78, 0x44, 0x59, 0x73, 0x57, 0x32, 0x74, 0x43, 0x52, 0x46, 0x41, 0x61, 0x4d, 0x79, 0x67, 0x4d, 0x56, 0x62, 0x78, 0x53, 0x75, 0x31, 0x6b, 0x38, 0x59, 0x48, 0x64, 0x47, 0x55, 0x59, 0x58, 0x6e, 0x5a, 0x6e, 0xa, 0x66, 0x64, 0x44, 0x31, 0x52, 0x77, 0x71, 0x6a, 0x62, 0x4f, 0x5a, 0x78, 0x47, 0x73, 0x75, 0x34, 0x4b, 0x50, 0x38, 0x30, 0x6d, 0x59, 0x71, 0x73, 0x63, 0x54, 0x50, 0x45, 0x74, 0x69, 0x51, 0x54, 0x74, 0x78, 0x2f, 0x2f, 0x6b, 0x46, 0x76, 0x6c, 0x4d, 0x41, 0x32, 0x6a, 0x5a, 0x4a, 0x69, 0x43, 0x62, 0x61, 0x65, 0x45, 0x4f, 0x45, 0x56, 0x72, 0x43, 0x2f, 0x51, 0x49, 0x2f, 0x69, 0x57, 0x71, 0xa, 0x6d, 0x48, 0x63, 0x68, 0x4e, 0x55, 0x44, 0x72, 0x4f, 0x75, 0x41, 0x54, 0x68, 0x2f, 0x33, 0x7a, 0x76, 0x68, 0x4c, 0x75, 0x79, 0x61, 0x70, 0x65, 0x36, 0x4b, 0x77, 0x58, 0x6e, 0x4b, 0x73, 0x46, 0x41, 0x48, 0x54, 0x41, 0x68, 0x51, 0x39, 0x2b, 0x52, 0x38, 0x72, 0x4e, 0x55, 0x33, 0x51, 0x6d, 0x64, 0x2f, 0x36, 0x35, 0x63, 0x39, 0x4b, 0x6c, 0x6d, 0x35, 0x55, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/05/18 16:56:48 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/05/18 16:56:48 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "headers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=20) "customRequestHeaders": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=2) {
                (string) (len=16) "X-Forwarded-Port": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=17) "X-Forwarded-Proto": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "headers": (map[string]interface {}) (len=1) {
     (string) (len=20) "customRequestHeaders": (map[string]interface {}) (len=2) {
      (string) (len=16) "X-Forwarded-Port": (string) (len=3) "443",
      (string) (len=17) "X-Forwarded-Proto": (string) (len=5) "https"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=28) "traefik.containo.us/v1alpha1",
   (string) (len=4) "kind": (string) (len=10) "Middleware",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=20) "requestheaders-https",
    (string) (len=9) "namespace": (string) (len=7) "default"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2021/05/18 16:56:48 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/05/18 16:56:48 Finished
